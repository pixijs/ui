{"version":"1.0.0","metadata":{"linker":"(unsigned)","siteRoot":""},"root":{"id":"root-Fcjti0iNv_JyE7yobb9vO","name":"","type":"RootDoc","members":[{"id":"C3QoMuSntAWmFeNlkBqFq","name":"Button","brief":"","examples":[{"caption":"","code":" ```\n const spriteButton = new Button({\n     view: new PixiSprite(Texture.from(`button.png`)),\n     hoverView: new PixiSprite(Texture.from(`button_hover.png`)),\n     pressedView: new PixiSprite(Texture.from(`button_pressed.png`)),\n     disabledView: new PixiSprite(Texture.from(`button_disabled.png`)),\n     textView: new Text(text, { fill: 0xFFFFFF }),\n });\n\n const graphicsButton = new Button({\n     view: new PixiGraphics().beginFill(color).drawRoundedRect(0, 0, width, height, radius),\n     hoverView: new PixiGraphics().beginFill(hoverColor).drawRoundedRect(0, 0, width, height, radius),\n     pressedView: new PixiGraphics().beginFill(pressedColor).drawRoundedRect(0, 0, width, height, radius),\n     disabledView: new PixiGraphics().beginFill(disabledColor).drawRoundedRect(0, 0, width, height, radius),\n     textView: new Text(text, { fill: 0xFFFFFF }),\n     padding: 10,\n     textOffset: { x: 10, y: 1 },\n });\n\n ```"}],"type":"ClassDoc","description":"<p>Container based component that gives us a starting point for UI buttons.\nIt composes a view rather than extends one, this ...","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"7XgPbzvBTgiYLBpL8UV1M","name":"CheckBox","brief":"","examples":[{"caption":"","code":" ```\n  new CheckBox({\n     checked: false,\n     style: {\n         unchecked: new PixiSprite(Texture.from(`switch_off.png`)),\n         checked: new PixiSprite(Texture.from(`switch_on.png`)),\n     }\n });\n\n ```"}],"type":"ClassDoc","description":"<p>Creates a container based checkbox element</p>","params":[],"returns":[],"extends":["Switch"],"implements":[]},{"id":"7LfDQTU_5PMKvv8-CbSGW","name":"DoubleSlider","brief":"","examples":[{"caption":"","code":" ```\n const width = 250;\n const height = 50;\n\n const bg = new Graphics()\n     .beginFill(0x000000).drawRoundedRect(0, 0, width, height, height/2)\n     .beginFill(0x808080).drawRoundedRect(5, 5, width-10, height-10, height/2);\n\n const fill = new Graphics()\n     .beginFill(0xFFFFFF).drawRoundedRect(0, 0, width-10, height-10, (height-10)/2);\n\n const slider1 = new Graphics()\n     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n     .beginFill(0x000000).drawCircle(0, 0, 20);\n\n const slider2 = new Graphics()\n     .beginFill(0xDCDCDC).drawCircle(0, 0, 23)\n     .beginFill(0x000000).drawCircle(0, 0, 20);\n\n const slider = new DoubleSlider({\n     bg,\n     fill,\n     slider1,\n     slider2,\n     min: 0,\n     max: 100,\n     value1: 10,\n     value2: 90,\n     valueTextStyle: {\n         fill: 0xDCDCDC,\n         fontSize: 14\n     }\n });\n\n slider.onChange.connect((value1, value2) =>{\n     console.log(`New slider range ${value1} - ${value2}`);\n });\n ```"}],"type":"ClassDoc","description":"<p>Creates a slider with range selection option</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"rjmO2-J6iqRI3caTcuAwm","name":"Input","brief":"","examples":[{"caption":"","code":"```\nnew Input({\n    bg: new PixiSprite(Texture.from('item.png')),\n    padding,\n    textStyle: {\n        ...buttonTextStyle,\n        fill: textColor,\n        fontSize,\n    },\n    maxLength,\n    align,\n    placeholder,\n    value: text,\n});\n```"}],"type":"ClassDoc","description":"<p>Container based component that creates an input element, so we can read users input text.</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"azGJDTfPFWZkYDToD35OS","name":"Layout","brief":"","examples":[{"caption":"","code":" ```\n const layout = new Layout({\n    type: 'horizontal',\n    elementsMargin: 10,\n    children: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50),\n        new Graphics().beginFill(0xFFFFFF).drawRect(0, 0, 100, 100),\n    ],\n });\n\n layout.addChild(new Graphics().beginFill(0x000000).drawRect(0, 0, 50, 50));\n ```"}],"type":"ClassDoc","description":"<p>Container based element for arranging pixi containers inside it basing on their sizes</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"D72GxiVZn5imSZJ-w5JUH","name":"MaskedFrame","brief":"","examples":[{"caption":"","code":"```\nnew MaskedFrame({\n    target: `avatar.png`,\n    mask: `avatar_mask.png`),\n    borderWidth: 5,\n    borderColor: 0xFFFFFF,\n});\n```"}],"type":"ClassDoc","description":"<p>Applies mask to a container and draws a same shape border around it</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"KEawESBESqT_MJpwn9ogy","name":"RadioGroup","brief":"","examples":[{"caption":"","code":" ```\n new RadioGroup({\n     selectedItem: 0,\n     items: ['Option 1', 'Option 2', 'Option 3'],\n     type: 'vertical',\n     elementsMargin: 10,\n     style: {\n         bg: 'radio.png',\n         checked: 'radio_checked.png',\n         textStyle: {\n             fontSize: 22,\n             fill: 0xFFFFFF,\n         }\n     },\n });\n\n ```"}],"type":"ClassDoc","description":"<p>Creates a container based group of checkbox elements that can be used as radio buttons</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"ky5GMV-4DLZRze9W8UuuP","name":"ScrollBox","brief":"","examples":[{"caption":"","code":"```\nnew ScrollBox({\n    background: 0XFFFFFF,\n    type: 'vertical',\n    elementsMargin: 10,\n    width: 200,\n    height: 300,\n    radius: 10,\n    padding: 10,\n    items: [\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n        new Graphics().beginFill(0x000000).drawRect(0, 0, 200, 50),\n    ],\n});\n```"}],"type":"ClassDoc","description":"<p>Can be used for arranging a lists of pixi container based elements and make them scrollable.</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"G6buWUoi6hP1fmoYAPiG2","name":"Select","brief":"","examples":[{"caption":"","code":" ```\n new Select({\n     closedBG: `select_closed.png`,\n     openBG: `select_open.png`,\n     textStyle: { fill: 0xffffff, fontSize: 20 },\n     items: {\n         items,\n         backgroundColor: 0x000000,\n         hoverColor: 0x000000,\n         width: 200,\n         height: 50,\n         textStyle: { fill: 0xffffff, fontSize: 20 },,\n         radius: 25,\n     },\n     selectedTextOffset: {\n         y: -13,\n     },\n     scrollBox: {\n         width: 200,\n         height: 350,\n         radius: 30,\n         offset: {\n             y: -16,\n             x: 24,\n         },\n     },\n });\n\n ```"}],"type":"ClassDoc","description":"<p>Container based component that gives us a selection dropdown.\nIt is a composition of a [[Button]] and a [[ScrollBox]].</p>...","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"WsXI_wXDhbbIrWz3WOD64","name":"Slider","brief":"","examples":[{"caption":"","code":" ```\n new Slider({\n     bg: 'slider_bg.png',\n     fill: 'slider.png',\n     slider: 'slider.png',\n     min: 0,\n     max: 100,\n     value: 50,\n     valueTextStyle: {\n         fill: 0xffffff,\n         fontSize: 22,\n     },\n     showValue: true,\n     valueTextOffset: {\n         y: -40,\n     },\n });\n\n singleSlider.onChange.connect((value) => {\n     onChange(`Slider changed > ${value}`);\n });\n ```"}],"type":"ClassDoc","description":"<p>Creates a slider</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"r5yA7XL45SJHSVKAhKmn7","name":"Switch","brief":"<p>Container based component that switches visibility of containers by click.</p>","examples":[{"caption":"","code":" ```\n const switch = new Switch([\n     new PixiSprite(Texture.from(`switch_off.png`)),\n     new PixiSprite(Texture.from(`switch_on.png`)),\n ]);\n\n ```"}],"type":"ClassDoc","description":"<p>Can be used for creating tabs, radio buttons, checkboxes etc.</p>","params":[],"returns":[],"extends":["Container"],"implements":[]},{"id":"pQptkfER_HxvzZMl00a1R","name":"Trackpad","brief":"<p>A track pad class that lets you scroll both in al directions. Its up to you to hook up the events.</p>","type":"ClassDoc","params":[],"returns":[],"extends":[],"implements":[]},{"id":"9I8VGOb-nnR6DhkZ9bJX7","name":"xEase","brief":"<p>override the easing function when constraining</p>","type":"PropertyDoc","params":[],"returns":[],"extends":[],"implements":[]},{"id":"FVhfcbz91k7I13ldJ_Ud2","name":"col","brief":"","examples":[{"caption":"","code":"```\ncol(15, // margins between elements\n    logo, // pregenerated Layout\n    menu, // pregenerated Layout\n    loginForm // pregenerated Layout\n);\n```"}],"type":"FunctionDoc","description":"<p>Helper to generate vertical Layout for arranging pixi containers vertically basing on their sizes</p>","params":[{"identifier":"elementsMargin","optional":false,"dataType":{"tokens":[{"value":"number","kind":"canonical"}],"template":"number"}},{"identifier":"params","optional":false,"variadic":true,"dataType":{"tokens":[{"value":"any","kind":"canonical"}],"template":"any"}}],"returns":[{"dataType":{"tokens":[{"value":"Layout","kind":"canonical"},{"value":"Layout","kind":"link"}],"template":"%1"}}],"extends":[],"implements":[]},{"id":"seWmQx_giBESBnny1TYGo","name":"row","brief":"","examples":[{"caption":"","code":"```\nrow(15, // margins between elements\n    logo, // pregenerated Layout\n    menu, // pregenerated Layout\n    loginForm // pregenerated Layout\n);\n```"}],"type":"FunctionDoc","description":"<p>Helper to generate horizontal Layout for arranging pixi containers horizontally basing on their sizes</p>","params":[{"identifier":"elementsMargin","optional":false,"dataType":{"tokens":[{"value":"number","kind":"canonical"}],"template":"number"}},{"identifier":"params","optional":false,"variadic":true,"dataType":{"tokens":[{"value":"any","kind":"canonical"}],"template":"any"}}],"returns":[{"dataType":{"tokens":[{"value":"Layout","kind":"canonical"},{"value":"Layout","kind":"link"}],"template":"%1"}}],"extends":[],"implements":[]}]},"registry":{"C3QoMuSntAWmFeNlkBqFq":{"uri":"Button.html"},"7XgPbzvBTgiYLBpL8UV1M":{"uri":"CheckBox.html"},"FVhfcbz91k7I13ldJ_Ud2":{"uri":"global.html#col"},"7LfDQTU_5PMKvv8-CbSGW":{"uri":"DoubleSlider.html"},"rjmO2-J6iqRI3caTcuAwm":{"uri":"Input.html"},"azGJDTfPFWZkYDToD35OS":{"uri":"Layout.html"},"D72GxiVZn5imSZJ-w5JUH":{"uri":"MaskedFrame.html"},"KEawESBESqT_MJpwn9ogy":{"uri":"RadioGroup.html"},"seWmQx_giBESBnny1TYGo":{"uri":"global.html#row"},"ky5GMV-4DLZRze9W8UuuP":{"uri":"ScrollBox.html"},"G6buWUoi6hP1fmoYAPiG2":{"uri":"Select.html"},"WsXI_wXDhbbIrWz3WOD64":{"uri":"Slider.html"},"r5yA7XL45SJHSVKAhKmn7":{"uri":"Switch.html"},"pQptkfER_HxvzZMl00a1R":{"uri":"Trackpad.html"},"9I8VGOb-nnR6DhkZ9bJX7":{"uri":"global.html#xEase"}}}