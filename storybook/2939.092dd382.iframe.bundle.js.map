{"version":3,"file":"2939.092dd382.iframe.bundle.js","mappings":";;;AAqJA;AChJA;;AAEA;AACA","sources":["webpack://@pixi/ui/./node_modules/@pixi/storybook-renderer/dist/chunk-EP5W2W6V.mjs","webpack://@pixi/ui/./node_modules/@storybook/addon-backgrounds/dist/chunk-OKHCZ3TL.mjs"],"sourcesContent":["// src/render.ts\nimport { Application } from \"pixi.js\";\nimport equals from \"deep-equal\";\nimport { dedent } from \"ts-dedent\";\nvar pixiApp;\nvar lastApplicationOptions;\nvar storyState = null;\nvar resizeState = {\n  w: 0,\n  h: 0,\n  canvasWidth: 0,\n  canvasHeight: 0\n};\nfunction resizeDefault(w, h) {\n  return { rendererWidth: w, rendererHeight: h, canvasWidth: w, canvasHeight: h };\n}\nfunction getPixiApplication(applicationOptions) {\n  if (!equals(applicationOptions, lastApplicationOptions)) {\n    if (pixiApp) {\n      pixiApp.destroy(true, {\n        children: true,\n        texture: true,\n        baseTexture: true\n      });\n    }\n    pixiApp = new Application(applicationOptions);\n    pixiApp.view.style.display = \"block\";\n    lastApplicationOptions = applicationOptions;\n  }\n  return pixiApp;\n}\nfunction resizeApplication({\n  containerWidth,\n  containerHeight,\n  app,\n  resizeFn,\n  storyObject,\n  force = false\n}) {\n  const { view, renderer } = app;\n  const newSize = resizeFn(containerWidth, containerHeight);\n  if (force || resizeState.w !== newSize.rendererWidth || resizeState.h !== newSize.rendererHeight || resizeState.canvasWidth !== newSize.canvasWidth || resizeState.canvasHeight !== newSize.canvasHeight) {\n    resizeState.w = newSize.rendererWidth;\n    resizeState.h = newSize.rendererHeight;\n    resizeState.canvasWidth = newSize.canvasWidth;\n    resizeState.canvasHeight = newSize.canvasHeight;\n    view.style.width = `${newSize.canvasWidth}px`;\n    view.style.height = `${newSize.canvasHeight}px`;\n    window.scrollTo(0, 0);\n    renderer.resize(resizeState.w, resizeState.h);\n    storyObject?.resize?.(resizeState.w, resizeState.h);\n  }\n}\nfunction initResize({\n  app,\n  resizeFn,\n  storyObject\n}) {\n  const storyResizeHandler = (e) => resizeApplication({\n    containerWidth: window.innerWidth,\n    containerHeight: window.innerHeight,\n    app,\n    resizeFn,\n    storyObject\n  });\n  window.addEventListener(\"resize\", storyResizeHandler);\n  resizeApplication({\n    containerWidth: window.innerWidth,\n    containerHeight: window.innerHeight,\n    app,\n    resizeFn,\n    storyObject,\n    force: Boolean(storyObject?.resize)\n  });\n  return storyResizeHandler;\n}\nfunction addStory({\n  app,\n  resizeFn,\n  storyObject\n}) {\n  const storyResizeHandler = initResize({\n    app,\n    resizeFn,\n    storyObject\n  });\n  app.stage.addChild(storyObject.view);\n  if (storyObject.update) {\n    app.ticker.add(storyObject.update, storyObject);\n  }\n  return storyResizeHandler;\n}\nfunction removeStory({\n  app,\n  storyObject,\n  storyResizeHandler\n}) {\n  if (storyObject.update) {\n    app.ticker.remove(storyObject.update, storyObject);\n  }\n  app.stage.removeChild(storyObject.view);\n  window.removeEventListener(\"resize\", storyResizeHandler);\n  storyObject.destroy?.();\n}\nfunction renderToDOM({\n  storyContext,\n  unboundStoryFn,\n  kind,\n  id,\n  name,\n  showMain,\n  showError,\n  forceRemount\n}, domElement) {\n  const { parameters } = storyContext;\n  const { pixi: pixiParameters } = parameters;\n  const { applicationOptions, resizeFn = resizeDefault } = pixiParameters;\n  const app = getPixiApplication(applicationOptions);\n  globalThis.__PIXI_APP__ = app;\n  if (domElement.firstChild !== app.view || forceRemount) {\n    domElement.innerHTML = \"\";\n    domElement.appendChild(app.view);\n  }\n  if (storyState) {\n    removeStory({\n      app,\n      storyObject: storyState.storyObject,\n      storyResizeHandler: storyState.resizeHandler\n    });\n    storyState = null;\n  }\n  const storyObject = unboundStoryFn({\n    ...storyContext,\n    parameters: {\n      ...parameters,\n      pixi: {\n        ...pixiParameters,\n        app\n      }\n    }\n  });\n  showMain();\n  if (!storyObject.view) {\n    showError({\n      title: `Expecting a StoryFnPixiReturnType from the story: \"${name}\" of \"${kind}\".`,\n      description: dedent`\n        Did you forget to return the correct object from the story?\n      `\n    });\n    return () => {\n    };\n  }\n  const storyResizeHandler = addStory({ app, resizeFn, storyObject });\n  storyState = {\n    storyObject,\n    resizeHandler: storyResizeHandler\n  };\n  return () => {\n    removeStory({ app, storyObject, storyResizeHandler });\n  };\n}\n\nexport {\n  renderToDOM\n};\n","import { global } from '@storybook/global';\nimport { dedent } from 'ts-dedent';\nimport { logger } from '@storybook/client-logger';\n\nvar ADDON_ID=\"storybook/background\",PARAM_KEY=\"backgrounds\";var {document,window}=global,isReduceMotionEnabled=()=>window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches,getBackgroundColorByName=(currentSelectedValue,backgrounds=[],defaultName)=>{if(currentSelectedValue===\"transparent\")return \"transparent\";if(backgrounds.find(background=>background.value===currentSelectedValue))return currentSelectedValue;let defaultBackground=backgrounds.find(background=>background.name===defaultName);if(defaultBackground)return defaultBackground.value;if(defaultName){let availableColors=backgrounds.map(background=>background.name).join(\", \");logger.warn(dedent`\n        Backgrounds Addon: could not find the default color \"${defaultName}\".\n        These are the available colors for your story based on your configuration:\n        ${availableColors}.\n      `);}return \"transparent\"},clearStyles=selector=>{(Array.isArray(selector)?selector:[selector]).forEach(clearStyle);},clearStyle=selector=>{let element=document.getElementById(selector);element&&element.parentElement?.removeChild(element);},addGridStyle=(selector,css)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css,document.head.appendChild(style);}},addBackgroundStyle=(selector,css,storyId)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css;let gridStyleSelector=`addon-backgrounds-grid${storyId?`-docs-${storyId}`:\"\"}`,existingGridStyle=document.getElementById(gridStyleSelector);existingGridStyle?existingGridStyle.parentElement?.insertBefore(style,existingGridStyle):document.head.appendChild(style);}};\n\nexport { ADDON_ID, PARAM_KEY, addBackgroundStyle, addGridStyle, clearStyles, getBackgroundColorByName, isReduceMotionEnabled };\n"],"names":[],"sourceRoot":""}