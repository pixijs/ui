{"version":3,"file":"7782.b7a55ee9.iframe.bundle.js","mappings":";;AA6KA;ACzJA;;AAEA;AACA","sources":["webpack://@pixi/ui/./node_modules/@pixi/storybook-renderer/dist/config.mjs","webpack://@pixi/ui/./node_modules/@storybook/addon-backgrounds/dist/preview.mjs"],"sourcesContent":["// src/render.ts\nimport equals from \"deep-equal\";\nimport { Application, Ticker } from \"pixi.js\";\nimport { dedent } from \"ts-dedent\";\nvar pixiApp;\nvar canvas = document.createElement(\"canvas\");\ncanvas.style.display = \"block\";\nvar appReady;\nvar lastApplicationOptions;\nvar storyState = null;\nvar resizeState = {\n  w: 0,\n  h: 0,\n  canvasWidth: 0,\n  canvasHeight: 0\n};\nfunction updater() {\n  let first = false;\n  return function(ticker) {\n    if (first) {\n      resizeApplication({\n        containerWidth: window.innerWidth,\n        containerHeight: window.innerHeight,\n        app: pixiApp,\n        resizeFn: resizeDefault,\n        force: true\n      });\n    }\n    appReady.then(() => {\n      storyState?.storyObject?.update?.(ticker);\n    });\n  };\n}\nfunction resizeDefault(w, h) {\n  return {\n    rendererWidth: w,\n    rendererHeight: h,\n    canvasWidth: w,\n    canvasHeight: h\n  };\n}\nfunction getPixiApplication(applicationOptions) {\n  if (!equals(applicationOptions, lastApplicationOptions)) {\n    if (pixiApp) {\n      pixiApp.destroy(true);\n    }\n    if (!Application.prototype.init) {\n      pixiApp = new Application({ ...applicationOptions, view: canvas });\n      appReady = Promise.resolve();\n    } else {\n      pixiApp = new Application();\n      appReady = pixiApp.init({ ...applicationOptions, canvas });\n    }\n    lastApplicationOptions = applicationOptions;\n  }\n  return pixiApp;\n}\nfunction resizeApplication({\n  containerWidth,\n  containerHeight,\n  app,\n  resizeFn,\n  storyObject,\n  force = false\n}) {\n  const { renderer } = app;\n  const newSize = resizeFn(containerWidth, containerHeight);\n  if (force || resizeState.w !== newSize.rendererWidth || resizeState.h !== newSize.rendererHeight || resizeState.canvasWidth !== newSize.canvasWidth || resizeState.canvasHeight !== newSize.canvasHeight) {\n    resizeState.w = newSize.rendererWidth;\n    resizeState.h = newSize.rendererHeight;\n    resizeState.canvasWidth = newSize.canvasWidth;\n    resizeState.canvasHeight = newSize.canvasHeight;\n    canvas.style.width = `${newSize.canvasWidth}px`;\n    canvas.style.height = `${newSize.canvasHeight}px`;\n    window.scrollTo(0, 0);\n    if (renderer)\n      renderer.resize(resizeState.w, resizeState.h);\n    storyObject?.resize?.(resizeState.w, resizeState.h);\n  }\n}\nfunction initResize({\n  app,\n  resizeFn,\n  storyObject\n}) {\n  const storyResizeHandler = (e) => resizeApplication({\n    containerWidth: window.innerWidth,\n    containerHeight: window.innerHeight,\n    app,\n    resizeFn,\n    storyObject\n  });\n  window.addEventListener(\"resize\", storyResizeHandler);\n  appReady.then(() => {\n    resizeApplication({\n      containerWidth: window.innerWidth,\n      containerHeight: window.innerHeight,\n      app,\n      resizeFn,\n      storyObject,\n      force: Boolean(storyObject?.resize)\n    });\n  });\n  return storyResizeHandler;\n}\nvar updateRef;\nfunction addStory({\n  app,\n  resizeFn,\n  storyObject\n}) {\n  const storyResizeHandler = initResize({\n    app,\n    resizeFn,\n    storyObject\n  });\n  app.stage.addChild(storyObject.view);\n  if (storyObject.update) {\n    updateRef = updater();\n    Ticker.shared.add(updateRef);\n  }\n  return storyResizeHandler;\n}\nfunction removeStory({\n  app,\n  storyObject,\n  storyResizeHandler\n}) {\n  if (storyObject.update) {\n    Ticker.shared.remove(updateRef);\n  }\n  app.stage.removeChild(storyObject.view);\n  window.removeEventListener(\"resize\", storyResizeHandler);\n  storyObject.destroy?.();\n}\nvar renderToDOM = ({ storyContext, unboundStoryFn, kind, id, name, showMain, showError, forceRemount }, domElement) => {\n  const canvasElement = domElement;\n  const { parameters: parameters2 } = storyContext;\n  const { pixi: pixiParameters } = parameters2;\n  const { applicationOptions, resizeFn = resizeDefault } = pixiParameters;\n  const app = getPixiApplication(applicationOptions);\n  globalThis.__PIXI_APP__ = app;\n  if (canvasElement.firstChild !== canvas || forceRemount) {\n    canvasElement.innerHTML = \"\";\n    canvasElement.appendChild(canvas);\n  }\n  if (storyState) {\n    removeStory({\n      app,\n      storyObject: storyState.storyObject,\n      storyResizeHandler: storyState.resizeHandler\n    });\n    storyState = null;\n  }\n  const storyObject = unboundStoryFn({\n    ...storyContext,\n    parameters: {\n      ...parameters2,\n      pixi: {\n        ...pixiParameters,\n        app,\n        appReady\n      }\n    }\n  });\n  showMain();\n  if (!storyObject.view) {\n    showError({\n      title: `Expecting a StoryFnPixiReturnType from the story: \"${name}\" of \"${kind}\".`,\n      description: dedent`\n        Did you forget to return the correct object from the story?\n      `\n    });\n    return () => {\n    };\n  }\n  const storyResizeHandler = addStory({ app, resizeFn, storyObject });\n  storyState = {\n    storyObject,\n    resizeHandler: storyResizeHandler\n  };\n  return () => {\n    removeStory({ app, storyObject, storyResizeHandler });\n  };\n};\nvar renderToCanvas = renderToDOM;\n\n// src/config.ts\nvar parameters = { framework: \"pixi\" };\nexport {\n  parameters,\n  renderToCanvas,\n  renderToDOM\n};\n","import { useEffect, useMemo } from 'storybook/internal/preview-api';\nimport { global } from '@storybook/global';\nimport { logger } from 'storybook/internal/client-logger';\nimport { dedent } from 'ts-dedent';\n\nvar PARAM_KEY=\"backgrounds\";var DEFAULT_BACKGROUNDS={light:{name:\"light\",value:\"#F8F8F8\"},dark:{name:\"dark\",value:\"#333\"}};var{document,window}=global,isReduceMotionEnabled=()=>!!window?.matchMedia(\"(prefers-reduced-motion: reduce)\")?.matches,clearStyles=selector=>{(Array.isArray(selector)?selector:[selector]).forEach(clearStyle);},clearStyle=selector=>{let element=document.getElementById(selector);element&&element.parentElement?.removeChild(element);},addGridStyle=(selector,css)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css,document.head.appendChild(style);}},addBackgroundStyle=(selector,css,storyId)=>{let existingStyle=document.getElementById(selector);if(existingStyle)existingStyle.innerHTML!==css&&(existingStyle.innerHTML=css);else {let style=document.createElement(\"style\");style.setAttribute(\"id\",selector),style.innerHTML=css;let gridStyleSelector=`addon-backgrounds-grid${storyId?`-docs-${storyId}`:\"\"}`,existingGridStyle=document.getElementById(gridStyleSelector);existingGridStyle?existingGridStyle.parentElement?.insertBefore(style,existingGridStyle):document.head.appendChild(style);}};var defaultGrid={cellSize:100,cellAmount:10,opacity:.8},BG_SELECTOR_BASE=\"addon-backgrounds\",GRID_SELECTOR_BASE=\"addon-backgrounds-grid\",transitionStyle=isReduceMotionEnabled()?\"\":\"transition: background-color 0.3s;\",withBackgroundAndGrid=(StoryFn,context)=>{let{globals,parameters:parameters2,viewMode,id}=context,{options=DEFAULT_BACKGROUNDS,disable,grid=defaultGrid}=parameters2[PARAM_KEY]||{},data=globals[PARAM_KEY]||{},backgroundName=data.value,item=backgroundName?options[backgroundName]:void 0,value=item?.value||\"transparent\",showGrid=data.grid||!1,shownBackground=!!item&&!disable,backgroundSelector=viewMode===\"docs\"?`#anchor--${id} .docs-story`:\".sb-show-main\",gridSelector=viewMode===\"docs\"?`#anchor--${id} .docs-story`:\".sb-show-main\",isLayoutPadded=parameters2.layout===void 0||parameters2.layout===\"padded\",defaultOffset=viewMode===\"docs\"?20:isLayoutPadded?16:0,{cellAmount,cellSize,opacity,offsetX=defaultOffset,offsetY=defaultOffset}=grid,backgroundSelectorId=viewMode===\"docs\"?`${BG_SELECTOR_BASE}-docs-${id}`:`${BG_SELECTOR_BASE}-color`,backgroundTarget=viewMode===\"docs\"?id:null;useEffect(()=>{let backgroundStyles=`\n    ${backgroundSelector} {\n      background: ${value} !important;\n      ${transitionStyle}\n      }`;if(!shownBackground){clearStyles(backgroundSelectorId);return}addBackgroundStyle(backgroundSelectorId,backgroundStyles,backgroundTarget);},[backgroundSelector,backgroundSelectorId,backgroundTarget,shownBackground,value]);let gridSelectorId=viewMode===\"docs\"?`${GRID_SELECTOR_BASE}-docs-${id}`:`${GRID_SELECTOR_BASE}`;return useEffect(()=>{if(!showGrid){clearStyles(gridSelectorId);return}let gridSize=[`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize}px ${cellSize}px`,`${cellSize}px ${cellSize}px`].join(\", \"),gridStyles=`\n        ${gridSelector} {\n          background-size: ${gridSize} !important;\n          background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;\n          background-blend-mode: difference !important;\n          background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n           linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n           linear-gradient(rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px),\n           linear-gradient(90deg, rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px) !important;\n        }\n      `;addGridStyle(gridSelectorId,gridStyles);},[cellAmount,cellSize,gridSelector,gridSelectorId,showGrid,offsetX,offsetY,opacity]),StoryFn()};var getBackgroundColorByName=(currentSelectedValue,backgrounds=[],defaultName)=>{if(currentSelectedValue===\"transparent\")return \"transparent\";if(backgrounds.find(background=>background.value===currentSelectedValue)||currentSelectedValue)return currentSelectedValue;let defaultBackground=backgrounds.find(background=>background.name===defaultName);if(defaultBackground)return defaultBackground.value;if(defaultName){let availableColors=backgrounds.map(background=>background.name).join(\", \");logger.warn(dedent`\n        Backgrounds Addon: could not find the default color \"${defaultName}\".\n        These are the available colors for your story based on your configuration:\n        ${availableColors}.\n      `);}return \"transparent\"};var withBackground=(StoryFn,context)=>{let{globals,parameters:parameters2}=context,globalsBackgroundColor=globals[PARAM_KEY]?.value,backgroundsConfig=parameters2[PARAM_KEY],selectedBackgroundColor=useMemo(()=>backgroundsConfig.disable?\"transparent\":getBackgroundColorByName(globalsBackgroundColor,backgroundsConfig.values,backgroundsConfig.default),[backgroundsConfig,globalsBackgroundColor]),isActive=useMemo(()=>selectedBackgroundColor&&selectedBackgroundColor!==\"transparent\",[selectedBackgroundColor]),selector=context.viewMode===\"docs\"?`#anchor--${context.id} .docs-story`:\".sb-show-main\",backgroundStyles=useMemo(()=>`\n      ${selector} {\n        background: ${selectedBackgroundColor} !important;\n        ${isReduceMotionEnabled()?\"\":\"transition: background-color 0.3s;\"}\n      }\n    `,[selectedBackgroundColor,selector]);return useEffect(()=>{let selectorId=context.viewMode===\"docs\"?`addon-backgrounds-docs-${context.id}`:\"addon-backgrounds-color\";if(!isActive){clearStyles(selectorId);return}addBackgroundStyle(selectorId,backgroundStyles,context.viewMode===\"docs\"?context.id:null);},[isActive,backgroundStyles,context]),StoryFn()};var withGrid=(StoryFn,context)=>{let{globals,parameters:parameters2}=context,gridParameters=parameters2[PARAM_KEY].grid,isActive=globals[PARAM_KEY]?.grid===!0&&gridParameters.disable!==!0,{cellAmount,cellSize,opacity}=gridParameters,isInDocs=context.viewMode===\"docs\",defaultOffset=parameters2.layout===void 0||parameters2.layout===\"padded\"?16:0,offsetX=gridParameters.offsetX??(isInDocs?20:defaultOffset),offsetY=gridParameters.offsetY??(isInDocs?20:defaultOffset),gridStyles=useMemo(()=>{let selector=context.viewMode===\"docs\"?`#anchor--${context.id} .docs-story`:\".sb-show-main\",backgroundSize=[`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize*cellAmount}px ${cellSize*cellAmount}px`,`${cellSize}px ${cellSize}px`,`${cellSize}px ${cellSize}px`].join(\", \");return `\n      ${selector} {\n        background-size: ${backgroundSize} !important;\n        background-position: ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px, ${offsetX}px ${offsetY}px !important;\n        background-blend-mode: difference !important;\n        background-image: linear-gradient(rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n         linear-gradient(90deg, rgba(130, 130, 130, ${opacity}) 1px, transparent 1px),\n         linear-gradient(rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px),\n         linear-gradient(90deg, rgba(130, 130, 130, ${opacity/2}) 1px, transparent 1px) !important;\n      }\n    `},[cellSize]);return useEffect(()=>{let selectorId=context.viewMode===\"docs\"?`addon-backgrounds-grid-docs-${context.id}`:\"addon-backgrounds-grid\";if(!isActive){clearStyles(selectorId);return}addGridStyle(selectorId,gridStyles);},[isActive,gridStyles,context]),StoryFn()};var decorators=globalThis.FEATURES?.backgroundsStoryGlobals?[withBackgroundAndGrid]:[withGrid,withBackground],parameters={[PARAM_KEY]:{grid:{cellSize:20,opacity:.5,cellAmount:5},disable:!1,...!globalThis.FEATURES?.backgroundsStoryGlobals&&{values:Object.values(DEFAULT_BACKGROUNDS)}}},modern={[PARAM_KEY]:{value:void 0,grid:!1}},initialGlobals=globalThis.FEATURES?.backgroundsStoryGlobals?modern:{[PARAM_KEY]:null};\n\nexport { decorators, initialGlobals, parameters };\n"],"names":[],"sourceRoot":""}