"use strict";(self.webpackChunk_pixi_ui=self.webpackChunk_pixi_ui||[]).push([[4334],{"./node_modules/pixi.js/lib/rendering/renderers/gl/WebGLRenderer.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{WebGLRenderer:()=>WebGLRenderer});var Extensions=__webpack_require__("./node_modules/pixi.js/lib/extensions/Extensions.mjs"),Matrix=__webpack_require__("./node_modules/pixi.js/lib/maths/matrix/Matrix.mjs"),maxRecommendedTextures=__webpack_require__("./node_modules/pixi.js/lib/rendering/batcher/gl/utils/maxRecommendedTextures.mjs"),compileHighShaderToProgram=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/compileHighShaderToProgram.mjs"),colorBit=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/colorBit.mjs"),generateTextureBatchBit=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/generateTextureBatchBit.mjs"),localUniformBit=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs"),roundPixelsBit=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/roundPixelsBit.mjs"),getBatchSamplersUniformGroup=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs"),Shader=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs"),UniformGroup=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs");class GlGraphicsAdaptor{init(){const uniforms=new UniformGroup.k({uColor:{value:new Float32Array([1,1,1,1]),type:"vec4<f32>"},uTransformMatrix:{value:new Matrix.u,type:"mat3x3<f32>"},uRound:{value:0,type:"f32"}}),maxTextures=(0,maxRecommendedTextures.a)(),glProgram=(0,compileHighShaderToProgram.I)({name:"graphics",bits:[colorBit.a,(0,generateTextureBatchBit.P)(maxTextures),localUniformBit.mA,roundPixelsBit.m]});this.shader=new Shader.M({glProgram,resources:{localUniforms:uniforms,batchSamplers:(0,getBatchSamplersUniformGroup.n)(maxTextures)}})}execute(graphicsPipe,renderable){const context=renderable.context,shader=context.customShader||this.shader,renderer=graphicsPipe.renderer,contextSystem=renderer.graphicsContext,{batcher,instructions}=contextSystem.getContextRenderData(context);shader.groups[0]=renderer.globalUniforms.bindGroup,renderer.state.set(graphicsPipe.state),renderer.shader.bind(shader),renderer.geometry.bind(batcher.geometry,shader.glProgram);const batches=instructions.instructions;for(let i=0;i<instructions.instructionSize;i++){const batch=batches[i];if(batch.size){for(let j=0;j<batch.textures.count;j++)renderer.texture.bind(batch.textures.textures[j],j);renderer.geometry.draw(batch.topology,batch.size,batch.start)}}}destroy(){this.shader.destroy(!0),this.shader=null}}GlGraphicsAdaptor.extension={type:[Extensions.Ag.WebGLPipesAdaptor],name:"graphics"};var textureBit=__webpack_require__("./node_modules/pixi.js/lib/rendering/high-shader/shader-bits/textureBit.mjs"),Texture=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs"),warn=__webpack_require__("./node_modules/pixi.js/lib/utils/logging/warn.mjs");class GlMeshAdaptor{init(){const glProgram=(0,compileHighShaderToProgram.I)({name:"mesh",bits:[localUniformBit.mA,textureBit.m,roundPixelsBit.m]});this._shader=new Shader.M({glProgram,resources:{uTexture:Texture.g.EMPTY.source,textureUniforms:{uTextureMatrix:{type:"mat3x3<f32>",value:new Matrix.u}}}})}execute(meshPipe,mesh){const renderer=meshPipe.renderer;let shader=mesh._shader;if(shader){if(!shader.glProgram)return void(0,warn.R)("Mesh shader has no glProgram",mesh.shader)}else{shader=this._shader;const texture=mesh.texture,source=texture.source;shader.resources.uTexture=source,shader.resources.uSampler=source.style,shader.resources.textureUniforms.uniforms.uTextureMatrix=texture.textureMatrix.mapCoord}shader.groups[100]=renderer.globalUniforms.bindGroup,shader.groups[101]=meshPipe.localUniformsBindGroup,renderer.encoder.draw({geometry:mesh._geometry,shader,state:mesh.state})}destroy(){this._shader.destroy(!0),this._shader=null}}GlMeshAdaptor.extension={type:[Extensions.Ag.WebGLPipesAdaptor],name:"mesh"};var State=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs");class GlBatchAdaptor{constructor(){this._didUpload=!1,this._tempState=State.U.for2d()}init(batcherPipe){batcherPipe.renderer.runners.contextChange.add(this)}contextChange(){this._didUpload=!1}start(batchPipe,geometry,shader){const renderer=batchPipe.renderer;renderer.shader.bind(shader,this._didUpload),renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup),renderer.geometry.bind(geometry,shader.glProgram)}execute(batchPipe,batch){const renderer=batchPipe.renderer;this._didUpload=!0,this._tempState.blendMode=batch.blendMode,renderer.state.set(this._tempState);const textures=batch.textures.textures;for(let i=0;i<batch.textures.count;i++)renderer.texture.bind(textures[i],i);renderer.geometry.draw(batch.topology,batch.size,batch.start)}}GlBatchAdaptor.extension={type:[Extensions.Ag.WebGLPipesAdaptor],name:"batch"};var AbstractRenderer=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/system/AbstractRenderer.mjs"),SharedSystems=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs"),types=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/types.mjs"),buffer_const=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs"),BUFFER_TYPE=(BUFFER_TYPE2=>(BUFFER_TYPE2[BUFFER_TYPE2.ELEMENT_ARRAY_BUFFER=34963]="ELEMENT_ARRAY_BUFFER",BUFFER_TYPE2[BUFFER_TYPE2.ARRAY_BUFFER=34962]="ARRAY_BUFFER",BUFFER_TYPE2[BUFFER_TYPE2.UNIFORM_BUFFER=35345]="UNIFORM_BUFFER",BUFFER_TYPE2))(BUFFER_TYPE||{});class GlBuffer{constructor(buffer,type){this._lastBindBaseLocation=-1,this._lastBindCallId=-1,this.buffer=buffer||null,this.updateID=-1,this.byteLength=-1,this.type=type}}class GlBufferSystem{constructor(renderer){this._gpuBuffers=Object.create(null),this._boundBufferBases=Object.create(null),this._minBaseLocation=0,this._nextBindBaseIndex=this._minBaseLocation,this._bindCallId=0,this._renderer=renderer,this._renderer.renderableGC.addManagedHash(this,"_gpuBuffers")}destroy(){this._renderer=null,this._gl=null,this._gpuBuffers=null,this._boundBufferBases=null}contextChange(){const gl=this._gl=this._renderer.gl;this._gpuBuffers=Object.create(null),this._maxBindings=gl.MAX_UNIFORM_BUFFER_BINDINGS?gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS):0}getGlBuffer(buffer){return this._gpuBuffers[buffer.uid]||this.createGLBuffer(buffer)}bind(buffer){const{_gl:gl}=this,glBuffer=this.getGlBuffer(buffer);gl.bindBuffer(glBuffer.type,glBuffer.buffer)}bindBufferBase(glBuffer,index){const{_gl:gl}=this;this._boundBufferBases[index]!==glBuffer&&(this._boundBufferBases[index]=glBuffer,glBuffer._lastBindBaseLocation=index,gl.bindBufferBase(gl.UNIFORM_BUFFER,index,glBuffer.buffer))}nextBindBase(hasTransformFeedback){this._bindCallId++,this._minBaseLocation=0,hasTransformFeedback&&(this._boundBufferBases[0]=null,this._minBaseLocation=1,this._nextBindBaseIndex<1&&(this._nextBindBaseIndex=1))}freeLocationForBufferBase(glBuffer){let freeIndex=this.getLastBindBaseLocation(glBuffer);if(freeIndex>=this._minBaseLocation)return glBuffer._lastBindCallId=this._bindCallId,freeIndex;let loop=0,nextIndex=this._nextBindBaseIndex;for(;loop<2;){nextIndex>=this._maxBindings&&(nextIndex=this._minBaseLocation,loop++);const curBuf=this._boundBufferBases[nextIndex];if(!curBuf||curBuf._lastBindCallId!==this._bindCallId)break;nextIndex++}return freeIndex=nextIndex,this._nextBindBaseIndex=nextIndex+1,loop>=2?-1:(glBuffer._lastBindCallId=this._bindCallId,this._boundBufferBases[freeIndex]=null,freeIndex)}getLastBindBaseLocation(glBuffer){const index=glBuffer._lastBindBaseLocation;return this._boundBufferBases[index]===glBuffer?index:-1}bindBufferRange(glBuffer,index,offset,size){const{_gl:gl}=this;offset||(offset=0),index||(index=0),this._boundBufferBases[index]=null,gl.bindBufferRange(gl.UNIFORM_BUFFER,index||0,glBuffer.buffer,256*offset,size||256)}updateBuffer(buffer){const{_gl:gl}=this,glBuffer=this.getGlBuffer(buffer);if(buffer._updateID===glBuffer.updateID)return glBuffer;glBuffer.updateID=buffer._updateID,gl.bindBuffer(glBuffer.type,glBuffer.buffer);const data=buffer.data,drawType=buffer.descriptor.usage&buffer_const.S.STATIC?gl.STATIC_DRAW:gl.DYNAMIC_DRAW;return data?glBuffer.byteLength>=data.byteLength?gl.bufferSubData(glBuffer.type,0,data,0,buffer._updateSize/data.BYTES_PER_ELEMENT):(glBuffer.byteLength=data.byteLength,gl.bufferData(glBuffer.type,data,drawType)):(glBuffer.byteLength=buffer.descriptor.size,gl.bufferData(glBuffer.type,glBuffer.byteLength,drawType)),glBuffer}destroyAll(){const gl=this._gl;for(const id in this._gpuBuffers)gl.deleteBuffer(this._gpuBuffers[id].buffer);this._gpuBuffers=Object.create(null)}onBufferDestroy(buffer,contextLost){const glBuffer=this._gpuBuffers[buffer.uid],gl=this._gl;contextLost||gl.deleteBuffer(glBuffer.buffer),this._gpuBuffers[buffer.uid]=null}createGLBuffer(buffer){const{_gl:gl}=this;let type=BUFFER_TYPE.ARRAY_BUFFER;buffer.descriptor.usage&buffer_const.S.INDEX?type=BUFFER_TYPE.ELEMENT_ARRAY_BUFFER:buffer.descriptor.usage&buffer_const.S.UNIFORM&&(type=BUFFER_TYPE.UNIFORM_BUFFER);const glBuffer=new GlBuffer(gl.createBuffer(),type);return this._gpuBuffers[buffer.uid]=glBuffer,buffer.on("destroy",this.onBufferDestroy,this),glBuffer}}GlBufferSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"buffer"};var adapter=__webpack_require__("./node_modules/pixi.js/lib/environment/adapter.mjs");const _GlContextSystem=class _GlContextSystem{constructor(renderer){this.supports={uint32Indices:!0,uniformBufferObject:!0,vertexArrayObject:!0,srgbTextures:!0,nonPowOf2wrapping:!0,msaa:!0,nonPowOf2mipmaps:!0},this._renderer=renderer,this.extensions=Object.create(null),this.handleContextLost=this.handleContextLost.bind(this),this.handleContextRestored=this.handleContextRestored.bind(this)}get isLost(){return!this.gl||this.gl.isContextLost()}contextChange(gl){this.gl=gl,this._renderer.gl=gl}init(options){options={..._GlContextSystem.defaultOptions,...options};let multiView=this.multiView=options.multiView;if(options.context&&multiView&&((0,warn.R)("Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together."),multiView=!1),this.canvas=multiView?adapter.e.get().createCanvas(this._renderer.canvas.width,this._renderer.canvas.height):this._renderer.view.canvas,options.context)this.initFromContext(options.context);else{const alpha=this._renderer.background.alpha<1,premultipliedAlpha=options.premultipliedAlpha??!0,antialias=options.antialias&&!this._renderer.backBuffer.useBackBuffer;this.createContext(options.preferWebGLVersion,{alpha,premultipliedAlpha,antialias,stencil:!0,preserveDrawingBuffer:options.preserveDrawingBuffer,powerPreference:options.powerPreference??"default"})}}ensureCanvasSize(targetCanvas){if(!this.multiView)return void(targetCanvas!==this.canvas&&(0,warn.R)("multiView is disabled, but targetCanvas is not the main canvas"));const{canvas}=this;(canvas.width<targetCanvas.width||canvas.height<targetCanvas.height)&&(canvas.width=Math.max(targetCanvas.width,targetCanvas.width),canvas.height=Math.max(targetCanvas.height,targetCanvas.height))}initFromContext(gl){this.gl=gl,this.webGLVersion=gl instanceof adapter.e.get().getWebGLRenderingContext()?1:2,this.getExtensions(),this.validateContext(gl),this._renderer.runners.contextChange.emit(gl);const element=this._renderer.view.canvas;element.addEventListener("webglcontextlost",this.handleContextLost,!1),element.addEventListener("webglcontextrestored",this.handleContextRestored,!1)}createContext(preferWebGLVersion,options){let gl;const canvas=this.canvas;if(2===preferWebGLVersion&&(gl=canvas.getContext("webgl2",options)),!gl&&(gl=canvas.getContext("webgl",options),!gl))throw new Error("This browser does not support WebGL. Try using the canvas renderer");this.gl=gl,this.initFromContext(this.gl)}getExtensions(){const{gl}=this,common={anisotropicFiltering:gl.getExtension("EXT_texture_filter_anisotropic"),floatTextureLinear:gl.getExtension("OES_texture_float_linear"),s3tc:gl.getExtension("WEBGL_compressed_texture_s3tc"),s3tc_sRGB:gl.getExtension("WEBGL_compressed_texture_s3tc_srgb"),etc:gl.getExtension("WEBGL_compressed_texture_etc"),etc1:gl.getExtension("WEBGL_compressed_texture_etc1"),pvrtc:gl.getExtension("WEBGL_compressed_texture_pvrtc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"),atc:gl.getExtension("WEBGL_compressed_texture_atc"),astc:gl.getExtension("WEBGL_compressed_texture_astc"),bptc:gl.getExtension("EXT_texture_compression_bptc"),rgtc:gl.getExtension("EXT_texture_compression_rgtc"),loseContext:gl.getExtension("WEBGL_lose_context")};if(1===this.webGLVersion)this.extensions={...common,drawBuffers:gl.getExtension("WEBGL_draw_buffers"),depthTexture:gl.getExtension("WEBGL_depth_texture"),vertexArrayObject:gl.getExtension("OES_vertex_array_object")||gl.getExtension("MOZ_OES_vertex_array_object")||gl.getExtension("WEBKIT_OES_vertex_array_object"),uint32ElementIndex:gl.getExtension("OES_element_index_uint"),floatTexture:gl.getExtension("OES_texture_float"),floatTextureLinear:gl.getExtension("OES_texture_float_linear"),textureHalfFloat:gl.getExtension("OES_texture_half_float"),textureHalfFloatLinear:gl.getExtension("OES_texture_half_float_linear"),vertexAttribDivisorANGLE:gl.getExtension("ANGLE_instanced_arrays"),srgb:gl.getExtension("EXT_sRGB")};else{this.extensions={...common,colorBufferFloat:gl.getExtension("EXT_color_buffer_float")};const provokeExt=gl.getExtension("WEBGL_provoking_vertex");provokeExt&&provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL)}}handleContextLost(event){event.preventDefault(),this._contextLossForced&&(this._contextLossForced=!1,setTimeout((()=>{this.gl.isContextLost()&&this.extensions.loseContext?.restoreContext()}),0))}handleContextRestored(){this._renderer.runners.contextChange.emit(this.gl)}destroy(){const element=this._renderer.view.canvas;this._renderer=null,element.removeEventListener("webglcontextlost",this.handleContextLost),element.removeEventListener("webglcontextrestored",this.handleContextRestored),this.gl.useProgram(null),this.extensions.loseContext?.loseContext()}forceContextLoss(){this.extensions.loseContext?.loseContext(),this._contextLossForced=!0}validateContext(gl){const attributes=gl.getContextAttributes();attributes&&!attributes.stencil&&(0,warn.R)("Provided WebGL context does not have a stencil buffer, masks may not render correctly");const supports=this.supports,isWebGl2=2===this.webGLVersion,extensions=this.extensions;supports.uint32Indices=isWebGl2||!!extensions.uint32ElementIndex,supports.uniformBufferObject=isWebGl2,supports.vertexArrayObject=isWebGl2||!!extensions.vertexArrayObject,supports.srgbTextures=isWebGl2||!!extensions.srgb,supports.nonPowOf2wrapping=isWebGl2,supports.nonPowOf2mipmaps=isWebGl2,supports.msaa=isWebGl2,supports.uint32Indices||(0,warn.R)("Provided WebGL context does not support 32 index buffer, large scenes may not render correctly")}};_GlContextSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"context"},_GlContextSystem.defaultOptions={context:null,premultipliedAlpha:!0,preserveDrawingBuffer:!1,powerPreference:void 0,preferWebGLVersion:2,multiView:!1};let GlContextSystem=_GlContextSystem;var getAttributeInfoFromFormat=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs"),ensureAttributes=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs"),GL_FORMATS=(GL_FORMATS2=>(GL_FORMATS2[GL_FORMATS2.RGBA=6408]="RGBA",GL_FORMATS2[GL_FORMATS2.RGB=6407]="RGB",GL_FORMATS2[GL_FORMATS2.RG=33319]="RG",GL_FORMATS2[GL_FORMATS2.RED=6403]="RED",GL_FORMATS2[GL_FORMATS2.RGBA_INTEGER=36249]="RGBA_INTEGER",GL_FORMATS2[GL_FORMATS2.RGB_INTEGER=36248]="RGB_INTEGER",GL_FORMATS2[GL_FORMATS2.RG_INTEGER=33320]="RG_INTEGER",GL_FORMATS2[GL_FORMATS2.RED_INTEGER=36244]="RED_INTEGER",GL_FORMATS2[GL_FORMATS2.ALPHA=6406]="ALPHA",GL_FORMATS2[GL_FORMATS2.LUMINANCE=6409]="LUMINANCE",GL_FORMATS2[GL_FORMATS2.LUMINANCE_ALPHA=6410]="LUMINANCE_ALPHA",GL_FORMATS2[GL_FORMATS2.DEPTH_COMPONENT=6402]="DEPTH_COMPONENT",GL_FORMATS2[GL_FORMATS2.DEPTH_STENCIL=34041]="DEPTH_STENCIL",GL_FORMATS2))(GL_FORMATS||{}),GL_TARGETS=(GL_TARGETS2=>(GL_TARGETS2[GL_TARGETS2.TEXTURE_2D=3553]="TEXTURE_2D",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP=34067]="TEXTURE_CUBE_MAP",GL_TARGETS2[GL_TARGETS2.TEXTURE_2D_ARRAY=35866]="TEXTURE_2D_ARRAY",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_POSITIVE_X=34069]="TEXTURE_CUBE_MAP_POSITIVE_X",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_NEGATIVE_X=34070]="TEXTURE_CUBE_MAP_NEGATIVE_X",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_POSITIVE_Y=34071]="TEXTURE_CUBE_MAP_POSITIVE_Y",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_NEGATIVE_Y=34072]="TEXTURE_CUBE_MAP_NEGATIVE_Y",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_POSITIVE_Z=34073]="TEXTURE_CUBE_MAP_POSITIVE_Z",GL_TARGETS2[GL_TARGETS2.TEXTURE_CUBE_MAP_NEGATIVE_Z=34074]="TEXTURE_CUBE_MAP_NEGATIVE_Z",GL_TARGETS2))(GL_TARGETS||{}),GL_TYPES=(GL_TYPES2=>(GL_TYPES2[GL_TYPES2.UNSIGNED_BYTE=5121]="UNSIGNED_BYTE",GL_TYPES2[GL_TYPES2.UNSIGNED_SHORT=5123]="UNSIGNED_SHORT",GL_TYPES2[GL_TYPES2.UNSIGNED_SHORT_5_6_5=33635]="UNSIGNED_SHORT_5_6_5",GL_TYPES2[GL_TYPES2.UNSIGNED_SHORT_4_4_4_4=32819]="UNSIGNED_SHORT_4_4_4_4",GL_TYPES2[GL_TYPES2.UNSIGNED_SHORT_5_5_5_1=32820]="UNSIGNED_SHORT_5_5_5_1",GL_TYPES2[GL_TYPES2.UNSIGNED_INT=5125]="UNSIGNED_INT",GL_TYPES2[GL_TYPES2.UNSIGNED_INT_10F_11F_11F_REV=35899]="UNSIGNED_INT_10F_11F_11F_REV",GL_TYPES2[GL_TYPES2.UNSIGNED_INT_2_10_10_10_REV=33640]="UNSIGNED_INT_2_10_10_10_REV",GL_TYPES2[GL_TYPES2.UNSIGNED_INT_24_8=34042]="UNSIGNED_INT_24_8",GL_TYPES2[GL_TYPES2.UNSIGNED_INT_5_9_9_9_REV=35902]="UNSIGNED_INT_5_9_9_9_REV",GL_TYPES2[GL_TYPES2.BYTE=5120]="BYTE",GL_TYPES2[GL_TYPES2.SHORT=5122]="SHORT",GL_TYPES2[GL_TYPES2.INT=5124]="INT",GL_TYPES2[GL_TYPES2.FLOAT=5126]="FLOAT",GL_TYPES2[GL_TYPES2.FLOAT_32_UNSIGNED_INT_24_8_REV=36269]="FLOAT_32_UNSIGNED_INT_24_8_REV",GL_TYPES2[GL_TYPES2.HALF_FLOAT=36193]="HALF_FLOAT",GL_TYPES2))(GL_TYPES||{});const infoMap={uint8x2:GL_TYPES.UNSIGNED_BYTE,uint8x4:GL_TYPES.UNSIGNED_BYTE,sint8x2:GL_TYPES.BYTE,sint8x4:GL_TYPES.BYTE,unorm8x2:GL_TYPES.UNSIGNED_BYTE,unorm8x4:GL_TYPES.UNSIGNED_BYTE,snorm8x2:GL_TYPES.BYTE,snorm8x4:GL_TYPES.BYTE,uint16x2:GL_TYPES.UNSIGNED_SHORT,uint16x4:GL_TYPES.UNSIGNED_SHORT,sint16x2:GL_TYPES.SHORT,sint16x4:GL_TYPES.SHORT,unorm16x2:GL_TYPES.UNSIGNED_SHORT,unorm16x4:GL_TYPES.UNSIGNED_SHORT,snorm16x2:GL_TYPES.SHORT,snorm16x4:GL_TYPES.SHORT,float16x2:GL_TYPES.HALF_FLOAT,float16x4:GL_TYPES.HALF_FLOAT,float32:GL_TYPES.FLOAT,float32x2:GL_TYPES.FLOAT,float32x3:GL_TYPES.FLOAT,float32x4:GL_TYPES.FLOAT,uint32:GL_TYPES.UNSIGNED_INT,uint32x2:GL_TYPES.UNSIGNED_INT,uint32x3:GL_TYPES.UNSIGNED_INT,uint32x4:GL_TYPES.UNSIGNED_INT,sint32:GL_TYPES.INT,sint32x2:GL_TYPES.INT,sint32x3:GL_TYPES.INT,sint32x4:GL_TYPES.INT};const topologyToGlMap={"point-list":0,"line-list":1,"line-strip":3,"triangle-list":4,"triangle-strip":5};class GlGeometrySystem{constructor(renderer){this._geometryVaoHash=Object.create(null),this._renderer=renderer,this._activeGeometry=null,this._activeVao=null,this.hasVao=!0,this.hasInstance=!0,this._renderer.renderableGC.addManagedHash(this,"_geometryVaoHash")}contextChange(){const gl=this.gl=this._renderer.gl;if(!this._renderer.context.supports.vertexArrayObject)throw new Error("[PixiJS] Vertex Array Objects are not supported on this device");const nativeVaoExtension=this._renderer.context.extensions.vertexArrayObject;nativeVaoExtension&&(gl.createVertexArray=()=>nativeVaoExtension.createVertexArrayOES(),gl.bindVertexArray=vao=>nativeVaoExtension.bindVertexArrayOES(vao),gl.deleteVertexArray=vao=>nativeVaoExtension.deleteVertexArrayOES(vao));const nativeInstancedExtension=this._renderer.context.extensions.vertexAttribDivisorANGLE;nativeInstancedExtension&&(gl.drawArraysInstanced=(a,b,c,d)=>{nativeInstancedExtension.drawArraysInstancedANGLE(a,b,c,d)},gl.drawElementsInstanced=(a,b,c,d,e)=>{nativeInstancedExtension.drawElementsInstancedANGLE(a,b,c,d,e)},gl.vertexAttribDivisor=(a,b)=>nativeInstancedExtension.vertexAttribDivisorANGLE(a,b)),this._activeGeometry=null,this._activeVao=null,this._geometryVaoHash=Object.create(null)}bind(geometry,program){const gl=this.gl;this._activeGeometry=geometry;const vao=this.getVao(geometry,program);this._activeVao!==vao&&(this._activeVao=vao,gl.bindVertexArray(vao)),this.updateBuffers()}reset(){this.unbind()}updateBuffers(){const geometry=this._activeGeometry,bufferSystem=this._renderer.buffer;for(let i=0;i<geometry.buffers.length;i++){const buffer=geometry.buffers[i];bufferSystem.updateBuffer(buffer)}}checkCompatibility(geometry,program){const geometryAttributes=geometry.attributes,shaderAttributes=program._attributeData;for(const j in shaderAttributes)if(!geometryAttributes[j])throw new Error(`shader and geometry incompatible, geometry missing the "${j}" attribute`)}getSignature(geometry,program){const attribs=geometry.attributes,shaderAttributes=program._attributeData,strings=["g",geometry.uid];for(const i in attribs)shaderAttributes[i]&&strings.push(i,shaderAttributes[i].location);return strings.join("-")}getVao(geometry,program){return this._geometryVaoHash[geometry.uid]?.[program._key]||this.initGeometryVao(geometry,program)}initGeometryVao(geometry,program,_incRefCount=!0){const gl=this._renderer.gl,bufferSystem=this._renderer.buffer;this._renderer.shader._getProgramData(program),this.checkCompatibility(geometry,program);const signature=this.getSignature(geometry,program);this._geometryVaoHash[geometry.uid]||(this._geometryVaoHash[geometry.uid]=Object.create(null),geometry.on("destroy",this.onGeometryDestroy,this));const vaoObjectHash=this._geometryVaoHash[geometry.uid];let vao=vaoObjectHash[signature];if(vao)return vaoObjectHash[program._key]=vao,vao;(0,ensureAttributes.q)(geometry,program._attributeData);const buffers=geometry.buffers;vao=gl.createVertexArray(),gl.bindVertexArray(vao);for(let i=0;i<buffers.length;i++){const buffer=buffers[i];bufferSystem.bind(buffer)}return this.activateVao(geometry,program),vaoObjectHash[program._key]=vao,vaoObjectHash[signature]=vao,gl.bindVertexArray(null),vao}onGeometryDestroy(geometry,contextLost){const vaoObjectHash=this._geometryVaoHash[geometry.uid],gl=this.gl;if(vaoObjectHash){if(contextLost)for(const i in vaoObjectHash)this._activeVao!==vaoObjectHash[i]&&this.unbind(),gl.deleteVertexArray(vaoObjectHash[i]);this._geometryVaoHash[geometry.uid]=null}}destroyAll(contextLost=!1){const gl=this.gl;for(const i in this._geometryVaoHash){if(contextLost)for(const j in this._geometryVaoHash[i]){const vaoObjectHash=this._geometryVaoHash[i];this._activeVao!==vaoObjectHash&&this.unbind(),gl.deleteVertexArray(vaoObjectHash[j])}this._geometryVaoHash[i]=null}}activateVao(geometry,program){const gl=this._renderer.gl,bufferSystem=this._renderer.buffer,attributes=geometry.attributes;geometry.indexBuffer&&bufferSystem.bind(geometry.indexBuffer);let lastBuffer=null;for(const j in attributes){const attribute=attributes[j],buffer=attribute.buffer,glBuffer=bufferSystem.getGlBuffer(buffer),programAttrib=program._attributeData[j];if(programAttrib){lastBuffer!==glBuffer&&(bufferSystem.bind(buffer),lastBuffer=glBuffer);const location=programAttrib.location;gl.enableVertexAttribArray(location);const attributeInfo=(0,getAttributeInfoFromFormat.m)(attribute.format),type=(format=attribute.format,infoMap[format]??infoMap.float32);if("int"===programAttrib.format?.substring(1,4)?gl.vertexAttribIPointer(location,attributeInfo.size,type,attribute.stride,attribute.offset):gl.vertexAttribPointer(location,attributeInfo.size,type,attributeInfo.normalised,attribute.stride,attribute.offset),attribute.instance){if(!this.hasInstance)throw new Error("geometry error, GPU Instancing is not supported on this device");{const divisor=attribute.divisor??1;gl.vertexAttribDivisor(location,divisor)}}}}var format}draw(topology,size,start,instanceCount){const{gl}=this._renderer,geometry=this._activeGeometry,glTopology=topologyToGlMap[topology||geometry.topology];if(instanceCount??(instanceCount=geometry.instanceCount),geometry.indexBuffer){const byteSize=geometry.indexBuffer.data.BYTES_PER_ELEMENT,glType=2===byteSize?gl.UNSIGNED_SHORT:gl.UNSIGNED_INT;instanceCount>1?gl.drawElementsInstanced(glTopology,size||geometry.indexBuffer.data.length,glType,(start||0)*byteSize,instanceCount):gl.drawElements(glTopology,size||geometry.indexBuffer.data.length,glType,(start||0)*byteSize)}else instanceCount>1?gl.drawArraysInstanced(glTopology,start||0,size||geometry.getSize(),instanceCount):gl.drawArrays(glTopology,start||0,size||geometry.getSize());return this}unbind(){this.gl.bindVertexArray(null),this._activeVao=null,this._activeGeometry=null}destroy(){this._renderer=null,this.gl=null,this._activeVao=null,this._activeGeometry=null}}GlGeometrySystem.extension={type:[Extensions.Ag.WebGLSystem],name:"geometry"};var Geometry=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs"),TextureSource=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs"),GlProgram=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs");const bigTriangleGeometry=new Geometry.V({attributes:{aPosition:[-1,-1,3,-1,-1,3]}}),_GlBackBufferSystem=class _GlBackBufferSystem{constructor(renderer){this.useBackBuffer=!1,this._useBackBufferThisRender=!1,this._renderer=renderer}init(options={}){const{useBackBuffer,antialias}={..._GlBackBufferSystem.defaultOptions,...options};this.useBackBuffer=useBackBuffer,this._antialias=antialias,this._renderer.context.supports.msaa||((0,warn.R)("antialiasing, is not supported on when using the back buffer"),this._antialias=!1),this._state=State.U.for2d();const bigTriangleProgram=new GlProgram.M({vertex:"\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }",fragment:"\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }",name:"big-triangle"});this._bigTriangleShader=new Shader.M({glProgram:bigTriangleProgram,resources:{uTexture:Texture.g.WHITE.source}})}renderStart(options){const renderTarget=this._renderer.renderTarget.getRenderTarget(options.target);if(this._useBackBufferThisRender=this.useBackBuffer&&!!renderTarget.isRoot,this._useBackBufferThisRender){const renderTarget2=this._renderer.renderTarget.getRenderTarget(options.target);this._targetTexture=renderTarget2.colorTexture,options.target=this._getBackBufferTexture(renderTarget2.colorTexture)}}renderEnd(){this._presentBackBuffer()}_presentBackBuffer(){const renderer=this._renderer;renderer.renderTarget.finishRenderPass(),this._useBackBufferThisRender&&(renderer.renderTarget.bind(this._targetTexture,!1),this._bigTriangleShader.resources.uTexture=this._backBufferTexture.source,renderer.encoder.draw({geometry:bigTriangleGeometry,shader:this._bigTriangleShader,state:this._state}))}_getBackBufferTexture(targetSourceTexture){return this._backBufferTexture=this._backBufferTexture||new Texture.g({source:new TextureSource.v({width:targetSourceTexture.width,height:targetSourceTexture.height,resolution:targetSourceTexture._resolution,antialias:this._antialias})}),this._backBufferTexture.source.resize(targetSourceTexture.width,targetSourceTexture.height,targetSourceTexture._resolution),this._backBufferTexture}destroy(){this._backBufferTexture&&(this._backBufferTexture.destroy(),this._backBufferTexture=null)}};_GlBackBufferSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"backBuffer",priority:1},_GlBackBufferSystem.defaultOptions={useBackBuffer:!1};let GlBackBufferSystem=_GlBackBufferSystem;class GlColorMaskSystem{constructor(renderer){this._colorMaskCache=15,this._renderer=renderer}setMask(colorMask){this._colorMaskCache!==colorMask&&(this._colorMaskCache=colorMask,this._renderer.gl.colorMask(!!(8&colorMask),!!(4&colorMask),!!(2&colorMask),!!(1&colorMask)))}}GlColorMaskSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"colorMask"};class GlEncoderSystem{constructor(renderer){this.commandFinished=Promise.resolve(),this._renderer=renderer}setGeometry(geometry,shader){this._renderer.geometry.bind(geometry,shader.glProgram)}finishRenderPass(){}draw(options){const renderer=this._renderer,{geometry,shader,state,skipSync,topology:type,size,start,instanceCount}=options;renderer.shader.bind(shader,skipSync),renderer.geometry.bind(geometry,renderer.shader._activeProgram),state&&renderer.state.set(state),renderer.geometry.draw(type,size,start,instanceCount??geometry.instanceCount)}destroy(){this._renderer=null}}GlEncoderSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"encoder"};var GpuStencilModesToPixi=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs"),state_const=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs");class GlStencilSystem{constructor(renderer){this._stencilCache={enabled:!1,stencilReference:0,stencilMode:state_const.K.NONE},this._renderTargetStencilState=Object.create(null),renderer.renderTarget.onRenderTargetChange.add(this)}contextChange(gl){this._gl=gl,this._comparisonFuncMapping={always:gl.ALWAYS,never:gl.NEVER,equal:gl.EQUAL,"not-equal":gl.NOTEQUAL,less:gl.LESS,"less-equal":gl.LEQUAL,greater:gl.GREATER,"greater-equal":gl.GEQUAL},this._stencilOpsMapping={keep:gl.KEEP,zero:gl.ZERO,replace:gl.REPLACE,invert:gl.INVERT,"increment-clamp":gl.INCR,"decrement-clamp":gl.DECR,"increment-wrap":gl.INCR_WRAP,"decrement-wrap":gl.DECR_WRAP},this._stencilCache.enabled=!1,this._stencilCache.stencilMode=state_const.K.NONE,this._stencilCache.stencilReference=0}onRenderTargetChange(renderTarget){if(this._activeRenderTarget===renderTarget)return;this._activeRenderTarget=renderTarget;let stencilState=this._renderTargetStencilState[renderTarget.uid];stencilState||(stencilState=this._renderTargetStencilState[renderTarget.uid]={stencilMode:state_const.K.DISABLED,stencilReference:0}),this.setStencilMode(stencilState.stencilMode,stencilState.stencilReference)}setStencilMode(stencilMode,stencilReference){const stencilState=this._renderTargetStencilState[this._activeRenderTarget.uid],gl=this._gl,mode=GpuStencilModesToPixi.g[stencilMode],_stencilCache=this._stencilCache;stencilState.stencilMode=stencilMode,stencilState.stencilReference=stencilReference,stencilMode!==state_const.K.DISABLED?(this._stencilCache.enabled||(this._stencilCache.enabled=!0,gl.enable(gl.STENCIL_TEST)),stencilMode===_stencilCache.stencilMode&&_stencilCache.stencilReference===stencilReference||(_stencilCache.stencilMode=stencilMode,_stencilCache.stencilReference=stencilReference,gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare],stencilReference,255),gl.stencilOp(gl.KEEP,gl.KEEP,this._stencilOpsMapping[mode.stencilBack.passOp]))):this._stencilCache.enabled&&(this._stencilCache.enabled=!1,gl.disable(gl.STENCIL_TEST))}}GlStencilSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"stencil"};var UboSystem=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs");const WGSL_TO_STD40_SIZE={f32:4,i32:4,"vec2<f32>":8,"vec3<f32>":12,"vec4<f32>":16,"vec2<i32>":8,"vec3<i32>":12,"vec4<i32>":16,"mat2x2<f32>":32,"mat3x3<f32>":48,"mat4x4<f32>":64};function createUboElementsSTD40(uniformData){const uboElements=uniformData.map((data=>({data,offset:0,size:0})));let size=0,offset=0;for(let i=0;i<uboElements.length;i++){const uboElement=uboElements[i];if(size=WGSL_TO_STD40_SIZE[uboElement.data.type],!size)throw new Error(`Unknown type ${uboElement.data.type}`);uboElement.data.size>1&&(size=Math.max(size,16)*uboElement.data.size);const boundary=12===size?16:size;uboElement.size=size;const curOffset=offset%16;offset+=curOffset>0&&16-curOffset<boundary?(16-curOffset)%16:(size-curOffset%size)%size,uboElement.offset=offset,offset+=size}return offset=16*Math.ceil(offset/16),{uboElements,size:offset}}var createUboSyncFunction=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs"),uboSyncFunctions=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs");function generateArraySyncSTD40(uboElement,offsetToAdd){const rowSize=Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type]/16,1),elementSize=uboElement.data.value.length/uboElement.data.size,remainder=(4-elementSize%4)%4,data=uboElement.data.type.indexOf("i32")>=0?"dataInt32":"data";return`\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size*rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                ${data}[arrayOffset++] = v[t++];\n            }\n            ${0!==remainder?`arrayOffset += ${remainder};`:""}\n        }\n    `}function createUboSyncFunctionSTD40(uboElements){return(0,createUboSyncFunction.E)(uboElements,"uboStd40",generateArraySyncSTD40,uboSyncFunctions.g)}class GlUboSystem extends UboSystem.W{constructor(){super({createUboElements:createUboElementsSTD40,generateUboSync:createUboSyncFunctionSTD40})}}GlUboSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"ubo"};var RenderTargetSystem=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs"),Rectangle=__webpack_require__("./node_modules/pixi.js/lib/maths/shapes/Rectangle.mjs"),CanvasSource=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs"),gl_const=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs");class GlRenderTarget{constructor(){this.width=-1,this.height=-1,this.msaa=!1,this.msaaRenderBuffer=[]}}class GlRenderTargetAdaptor{constructor(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new Rectangle.M}init(renderer,renderTargetSystem){this._renderer=renderer,this._renderTargetSystem=renderTargetSystem,renderer.runners.contextChange.add(this)}contextChange(){this._clearColorCache=[0,0,0,0],this._viewPortCache=new Rectangle.M}copyToTexture(sourceRenderSurfaceTexture,destinationTexture,originSrc,size,originDest){const renderTargetSystem=this._renderTargetSystem,renderer=this._renderer,glRenderTarget=renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture),gl=renderer.gl;return this.finishRenderPass(sourceRenderSurfaceTexture),gl.bindFramebuffer(gl.FRAMEBUFFER,glRenderTarget.resolveTargetFramebuffer),renderer.texture.bind(destinationTexture,0),gl.copyTexSubImage2D(gl.TEXTURE_2D,0,originDest.x,originDest.y,originSrc.x,originSrc.y,size.width,size.height),destinationTexture}startRenderPass(renderTarget,clear=!0,clearColor,viewport){const renderTargetSystem=this._renderTargetSystem,source=renderTarget.colorTexture,gpuRenderTarget=renderTargetSystem.getGpuRenderTarget(renderTarget);let viewPortY=viewport.y;renderTarget.isRoot&&(viewPortY=source.pixelHeight-viewport.height),renderTarget.colorTextures.forEach((texture=>{this._renderer.texture.unbind(texture)}));const gl=this._renderer.gl;gl.bindFramebuffer(gl.FRAMEBUFFER,gpuRenderTarget.framebuffer);const viewPortCache=this._viewPortCache;viewPortCache.x===viewport.x&&viewPortCache.y===viewPortY&&viewPortCache.width===viewport.width&&viewPortCache.height===viewport.height||(viewPortCache.x=viewport.x,viewPortCache.y=viewPortY,viewPortCache.width=viewport.width,viewPortCache.height=viewport.height,gl.viewport(viewport.x,viewPortY,viewport.width,viewport.height)),gpuRenderTarget.depthStencilRenderBuffer||!renderTarget.stencil&&!renderTarget.depth||this._initStencil(gpuRenderTarget),this.clear(renderTarget,clear,clearColor)}finishRenderPass(renderTarget){const glRenderTarget=this._renderTargetSystem.getGpuRenderTarget(renderTarget);if(!glRenderTarget.msaa)return;const gl=this._renderer.gl;gl.bindFramebuffer(gl.FRAMEBUFFER,glRenderTarget.resolveTargetFramebuffer),gl.bindFramebuffer(gl.READ_FRAMEBUFFER,glRenderTarget.framebuffer),gl.blitFramebuffer(0,0,glRenderTarget.width,glRenderTarget.height,0,0,glRenderTarget.width,glRenderTarget.height,gl.COLOR_BUFFER_BIT,gl.NEAREST),gl.bindFramebuffer(gl.FRAMEBUFFER,glRenderTarget.framebuffer)}initGpuRenderTarget(renderTarget){const renderer=this._renderer,gl=renderer.gl,glRenderTarget=new GlRenderTarget;return renderTarget.colorTexture.resource===renderer.canvas?(this._renderer.context.ensureCanvasSize(renderTarget.colorTexture.resource),glRenderTarget.framebuffer=null,glRenderTarget):(this._initColor(renderTarget,glRenderTarget),gl.bindFramebuffer(gl.FRAMEBUFFER,null),glRenderTarget)}destroyGpuRenderTarget(gpuRenderTarget){const gl=this._renderer.gl;gpuRenderTarget.framebuffer&&(gl.deleteFramebuffer(gpuRenderTarget.framebuffer),gpuRenderTarget.framebuffer=null),gpuRenderTarget.resolveTargetFramebuffer&&(gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer),gpuRenderTarget.resolveTargetFramebuffer=null),gpuRenderTarget.depthStencilRenderBuffer&&(gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer),gpuRenderTarget.depthStencilRenderBuffer=null),gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer=>{gl.deleteRenderbuffer(renderBuffer)})),gpuRenderTarget.msaaRenderBuffer=null}clear(_renderTarget,clear,clearColor){if(!clear)return;const renderTargetSystem=this._renderTargetSystem;"boolean"==typeof clear&&(clear=clear?gl_const.u.ALL:gl_const.u.NONE);const gl=this._renderer.gl;if(clear&gl_const.u.COLOR){clearColor??(clearColor=renderTargetSystem.defaultClearColor);const clearColorCache=this._clearColorCache,clearColorArray=clearColor;clearColorCache[0]===clearColorArray[0]&&clearColorCache[1]===clearColorArray[1]&&clearColorCache[2]===clearColorArray[2]&&clearColorCache[3]===clearColorArray[3]||(clearColorCache[0]=clearColorArray[0],clearColorCache[1]=clearColorArray[1],clearColorCache[2]=clearColorArray[2],clearColorCache[3]=clearColorArray[3],gl.clearColor(clearColorArray[0],clearColorArray[1],clearColorArray[2],clearColorArray[3]))}gl.clear(clear)}resizeGpuRenderTarget(renderTarget){if(renderTarget.isRoot)return;const glRenderTarget=this._renderTargetSystem.getGpuRenderTarget(renderTarget);this._resizeColor(renderTarget,glRenderTarget),(renderTarget.stencil||renderTarget.depth)&&this._resizeStencil(glRenderTarget)}_initColor(renderTarget,glRenderTarget){const renderer=this._renderer,gl=renderer.gl,resolveTargetFramebuffer=gl.createFramebuffer();if(glRenderTarget.resolveTargetFramebuffer=resolveTargetFramebuffer,gl.bindFramebuffer(gl.FRAMEBUFFER,resolveTargetFramebuffer),glRenderTarget.width=renderTarget.colorTexture.source.pixelWidth,glRenderTarget.height=renderTarget.colorTexture.source.pixelHeight,renderTarget.colorTextures.forEach(((colorTexture,i)=>{const source=colorTexture.source;source.antialias&&(renderer.context.supports.msaa?glRenderTarget.msaa=!0:(0,warn.R)("[RenderTexture] Antialiasing on textures is not supported in WebGL1")),renderer.texture.bindSource(source,0);const glTexture=renderer.texture.getGlSource(source).texture;gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,3553,glTexture,0)})),glRenderTarget.msaa){const viewFramebuffer=gl.createFramebuffer();glRenderTarget.framebuffer=viewFramebuffer,gl.bindFramebuffer(gl.FRAMEBUFFER,viewFramebuffer),renderTarget.colorTextures.forEach(((_,i)=>{const msaaRenderBuffer=gl.createRenderbuffer();glRenderTarget.msaaRenderBuffer[i]=msaaRenderBuffer}))}else glRenderTarget.framebuffer=resolveTargetFramebuffer;this._resizeColor(renderTarget,glRenderTarget)}_resizeColor(renderTarget,glRenderTarget){const source=renderTarget.colorTexture.source;if(glRenderTarget.width=source.pixelWidth,glRenderTarget.height=source.pixelHeight,renderTarget.colorTextures.forEach(((colorTexture,i)=>{0!==i&&colorTexture.source.resize(source.width,source.height,source._resolution)})),glRenderTarget.msaa){const renderer=this._renderer,gl=renderer.gl,viewFramebuffer=glRenderTarget.framebuffer;gl.bindFramebuffer(gl.FRAMEBUFFER,viewFramebuffer),renderTarget.colorTextures.forEach(((colorTexture,i)=>{const source2=colorTexture.source;renderer.texture.bindSource(source2,0);const glInternalFormat=renderer.texture.getGlSource(source2).internalFormat,msaaRenderBuffer=glRenderTarget.msaaRenderBuffer[i];gl.bindRenderbuffer(gl.RENDERBUFFER,msaaRenderBuffer),gl.renderbufferStorageMultisample(gl.RENDERBUFFER,4,glInternalFormat,source2.pixelWidth,source2.pixelHeight),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,gl.RENDERBUFFER,msaaRenderBuffer)}))}}_initStencil(glRenderTarget){if(null===glRenderTarget.framebuffer)return;const gl=this._renderer.gl,depthStencilRenderBuffer=gl.createRenderbuffer();glRenderTarget.depthStencilRenderBuffer=depthStencilRenderBuffer,gl.bindRenderbuffer(gl.RENDERBUFFER,depthStencilRenderBuffer),gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,depthStencilRenderBuffer),this._resizeStencil(glRenderTarget)}_resizeStencil(glRenderTarget){const gl=this._renderer.gl;gl.bindRenderbuffer(gl.RENDERBUFFER,glRenderTarget.depthStencilRenderBuffer),glRenderTarget.msaa?gl.renderbufferStorageMultisample(gl.RENDERBUFFER,4,gl.DEPTH24_STENCIL8,glRenderTarget.width,glRenderTarget.height):gl.renderbufferStorage(gl.RENDERBUFFER,2===this._renderer.context.webGLVersion?gl.DEPTH24_STENCIL8:gl.DEPTH_STENCIL,glRenderTarget.width,glRenderTarget.height)}prerender(renderTarget){const resource=renderTarget.colorTexture.resource;this._renderer.context.multiView&&CanvasSource.q.test(resource)&&this._renderer.context.ensureCanvasSize(resource)}postrender(renderTarget){if(this._renderer.context.multiView&&CanvasSource.q.test(renderTarget.colorTexture.resource)){const contextCanvas=this._renderer.context.canvas,canvasSource=renderTarget.colorTexture;canvasSource.context2D.drawImage(contextCanvas,0,canvasSource.pixelHeight-contextCanvas.height)}}}class GlRenderTargetSystem extends RenderTargetSystem.l{constructor(renderer){super(renderer),this.adaptor=new GlRenderTargetAdaptor,this.adaptor.init(renderer,this)}}GlRenderTargetSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"renderTarget"};var BufferResource=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs");class GlProgramData{constructor(program,uniformData){this.program=program,this.uniformData=uniformData,this.uniformGroups={},this.uniformDirtyGroups={},this.uniformBlockBindings={}}destroy(){this.uniformData=null,this.uniformGroups=null,this.uniformDirtyGroups=null,this.uniformBlockBindings=null,this.program=null}}function compileShader(gl,type,src){const shader=gl.createShader(type);return gl.shaderSource(shader,src),gl.compileShader(shader),shader}function booleanArray(size){const array=new Array(size);for(let i=0;i<array.length;i++)array[i]=!1;return array}function defaultValue(type,size){switch(type){case"float":case"int":case"uint":case"sampler2D":case"sampler2DArray":return 0;case"vec2":return new Float32Array(2*size);case"vec3":return new Float32Array(3*size);case"vec4":return new Float32Array(4*size);case"ivec2":return new Int32Array(2*size);case"ivec3":return new Int32Array(3*size);case"ivec4":return new Int32Array(4*size);case"uvec2":return new Uint32Array(2*size);case"uvec3":return new Uint32Array(3*size);case"uvec4":return new Uint32Array(4*size);case"bool":return!1;case"bvec2":return booleanArray(2*size);case"bvec3":return booleanArray(3*size);case"bvec4":return booleanArray(4*size);case"mat2":return new Float32Array([1,0,0,1]);case"mat3":return new Float32Array([1,0,0,0,1,0,0,0,1]);case"mat4":return new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])}return null}let GL_TABLE=null;const GL_TO_GLSL_TYPES={FLOAT:"float",FLOAT_VEC2:"vec2",FLOAT_VEC3:"vec3",FLOAT_VEC4:"vec4",INT:"int",INT_VEC2:"ivec2",INT_VEC3:"ivec3",INT_VEC4:"ivec4",UNSIGNED_INT:"uint",UNSIGNED_INT_VEC2:"uvec2",UNSIGNED_INT_VEC3:"uvec3",UNSIGNED_INT_VEC4:"uvec4",BOOL:"bool",BOOL_VEC2:"bvec2",BOOL_VEC3:"bvec3",BOOL_VEC4:"bvec4",FLOAT_MAT2:"mat2",FLOAT_MAT3:"mat3",FLOAT_MAT4:"mat4",SAMPLER_2D:"sampler2D",INT_SAMPLER_2D:"sampler2D",UNSIGNED_INT_SAMPLER_2D:"sampler2D",SAMPLER_CUBE:"samplerCube",INT_SAMPLER_CUBE:"samplerCube",UNSIGNED_INT_SAMPLER_CUBE:"samplerCube",SAMPLER_2D_ARRAY:"sampler2DArray",INT_SAMPLER_2D_ARRAY:"sampler2DArray",UNSIGNED_INT_SAMPLER_2D_ARRAY:"sampler2DArray"},GLSL_TO_VERTEX_TYPES={float:"float32",vec2:"float32x2",vec3:"float32x3",vec4:"float32x4",int:"sint32",ivec2:"sint32x2",ivec3:"sint32x3",ivec4:"sint32x4",uint:"uint32",uvec2:"uint32x2",uvec3:"uint32x3",uvec4:"uint32x4",bool:"uint32",bvec2:"uint32x2",bvec3:"uint32x3",bvec4:"uint32x4"};function mapType(gl,type){if(!GL_TABLE){const typeNames=Object.keys(GL_TO_GLSL_TYPES);GL_TABLE={};for(let i=0;i<typeNames.length;++i){const tn=typeNames[i];GL_TABLE[gl[tn]]=GL_TO_GLSL_TYPES[tn]}}return GL_TABLE[type]}function mapGlToVertexFormat(gl,type){const typeValue=mapType(gl,type);return GLSL_TO_VERTEX_TYPES[typeValue]||"float32"}function logPrettyShaderError(gl,shader){const shaderSrc=gl.getShaderSource(shader).split("\n").map(((line,index)=>`${index}: ${line}`)),shaderLog=gl.getShaderInfoLog(shader),splitShader=shaderLog.split("\n"),dedupe={},lineNumbers=splitShader.map((line=>parseFloat(line.replace(/^ERROR\: 0\:([\d]+)\:.*$/,"$1")))).filter((n=>!(!n||dedupe[n])&&(dedupe[n]=!0,!0))),logArgs=[""];lineNumbers.forEach((number=>{shaderSrc[number-1]=`%c${shaderSrc[number-1]}%c`,logArgs.push("background: #FF0000; color:#FFFFFF; font-size: 10px","font-size: 10px")}));const fragmentSourceToLog=shaderSrc.join("\n");logArgs[0]=fragmentSourceToLog,console.error(shaderLog),console.groupCollapsed("click to view full shader code"),console.warn(...logArgs),console.groupEnd()}function generateProgram(gl,program){const glVertShader=compileShader(gl,gl.VERTEX_SHADER,program.vertex),glFragShader=compileShader(gl,gl.FRAGMENT_SHADER,program.fragment),webGLProgram=gl.createProgram();gl.attachShader(webGLProgram,glVertShader),gl.attachShader(webGLProgram,glFragShader);const transformFeedbackVaryings=program.transformFeedbackVaryings;transformFeedbackVaryings&&("function"!=typeof gl.transformFeedbackVaryings?(0,warn.R)("TransformFeedback is not supported but TransformFeedbackVaryings are given."):gl.transformFeedbackVaryings(webGLProgram,transformFeedbackVaryings.names,"separate"===transformFeedbackVaryings.bufferMode?gl.SEPARATE_ATTRIBS:gl.INTERLEAVED_ATTRIBS)),gl.linkProgram(webGLProgram),gl.getProgramParameter(webGLProgram,gl.LINK_STATUS)||function logProgramError(gl,program,vertexShader,fragmentShader){gl.getProgramParameter(program,gl.LINK_STATUS)||(gl.getShaderParameter(vertexShader,gl.COMPILE_STATUS)||logPrettyShaderError(gl,vertexShader),gl.getShaderParameter(fragmentShader,gl.COMPILE_STATUS)||logPrettyShaderError(gl,fragmentShader),console.error("PixiJS Error: Could not initialize shader."),""!==gl.getProgramInfoLog(program)&&console.warn("PixiJS Warning: gl.getProgramInfoLog()",gl.getProgramInfoLog(program)))}(gl,webGLProgram,glVertShader,glFragShader),program._attributeData=function extractAttributesFromGlProgram(program,gl,sortAttributes=!1){const attributes={},totalAttributes=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES);for(let i=0;i<totalAttributes;i++){const attribData=gl.getActiveAttrib(program,i);if(attribData.name.startsWith("gl_"))continue;const format=mapGlToVertexFormat(gl,attribData.type);attributes[attribData.name]={location:0,format,stride:(0,getAttributeInfoFromFormat.m)(format).stride,offset:0,instance:!1,start:0}}const keys=Object.keys(attributes);if(sortAttributes){keys.sort(((a,b)=>a>b?1:-1));for(let i=0;i<keys.length;i++)attributes[keys[i]].location=i,gl.bindAttribLocation(program,i,keys[i]);gl.linkProgram(program)}else for(let i=0;i<keys.length;i++)attributes[keys[i]].location=gl.getAttribLocation(program,keys[i]);return attributes}(webGLProgram,gl,!/^[ \t]*#[ \t]*version[ \t]+300[ \t]+es[ \t]*$/m.test(program.vertex)),program._uniformData=function getUniformData(program,gl){const uniforms={},totalUniforms=gl.getProgramParameter(program,gl.ACTIVE_UNIFORMS);for(let i=0;i<totalUniforms;i++){const uniformData=gl.getActiveUniform(program,i),name=uniformData.name.replace(/\[.*?\]$/,""),isArray=!!uniformData.name.match(/\[.*?\]$/),type=mapType(gl,uniformData.type);uniforms[name]={name,index:i,type,size:uniformData.size,isArray,value:defaultValue(type,uniformData.size)}}return uniforms}(webGLProgram,gl),program._uniformBlockData=function getUboData(program,gl){if(!gl.ACTIVE_UNIFORM_BLOCKS)return{};const uniformBlocks={},totalUniformsBlocks=gl.getProgramParameter(program,gl.ACTIVE_UNIFORM_BLOCKS);for(let i=0;i<totalUniformsBlocks;i++){const name=gl.getActiveUniformBlockName(program,i),uniformBlockIndex=gl.getUniformBlockIndex(program,name),size=gl.getActiveUniformBlockParameter(program,i,gl.UNIFORM_BLOCK_DATA_SIZE);uniformBlocks[name]={name,index:uniformBlockIndex,size}}return uniformBlocks}(webGLProgram,gl),gl.deleteShader(glVertShader),gl.deleteShader(glFragShader);const uniformData={};for(const i in program._uniformData){const data=program._uniformData[i];uniformData[i]={location:gl.getUniformLocation(webGLProgram,i),value:defaultValue(data.type,data.size)}}return new GlProgramData(webGLProgram,uniformData)}const defaultSyncData={textureCount:0,blockIndex:0};class GlShaderSystem{constructor(renderer){this._activeProgram=null,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._renderer=renderer,this._renderer.renderableGC.addManagedHash(this,"_programDataHash")}contextChange(gl){this._gl=gl,this._programDataHash=Object.create(null),this._shaderSyncFunctions=Object.create(null),this._activeProgram=null,this.maxTextures=(0,maxRecommendedTextures.a)()}bind(shader,skipSync){if(this._setProgram(shader.glProgram),skipSync)return;defaultSyncData.textureCount=0,defaultSyncData.blockIndex=0;let syncFunction=this._shaderSyncFunctions[shader.glProgram._key];syncFunction||(syncFunction=this._shaderSyncFunctions[shader.glProgram._key]=this._generateShaderSync(shader,this)),this._renderer.buffer.nextBindBase(!!shader.glProgram.transformFeedbackVaryings),syncFunction(this._renderer,shader,defaultSyncData)}updateUniformGroup(uniformGroup){this._renderer.uniformGroup.updateUniformGroup(uniformGroup,this._activeProgram,defaultSyncData)}bindUniformBlock(uniformGroup,name,index=0){const bufferSystem=this._renderer.buffer,programData=this._getProgramData(this._activeProgram),isBufferResource=uniformGroup._bufferResource;isBufferResource||this._renderer.ubo.updateUniformGroup(uniformGroup);const buffer=uniformGroup.buffer,glBuffer=bufferSystem.updateBuffer(buffer),boundLocation=bufferSystem.freeLocationForBufferBase(glBuffer);if(isBufferResource){const{offset,size}=uniformGroup;0===offset&&size===buffer.data.byteLength?bufferSystem.bindBufferBase(glBuffer,boundLocation):bufferSystem.bindBufferRange(glBuffer,boundLocation,offset)}else bufferSystem.getLastBindBaseLocation(glBuffer)!==boundLocation&&bufferSystem.bindBufferBase(glBuffer,boundLocation);const uniformBlockIndex=this._activeProgram._uniformBlockData[name].index;programData.uniformBlockBindings[index]!==boundLocation&&(programData.uniformBlockBindings[index]=boundLocation,this._renderer.gl.uniformBlockBinding(programData.program,uniformBlockIndex,boundLocation))}_setProgram(program){if(this._activeProgram===program)return;this._activeProgram=program;const programData=this._getProgramData(program);this._gl.useProgram(programData.program)}_getProgramData(program){return this._programDataHash[program._key]||this._createProgramData(program)}_createProgramData(program){const key=program._key;return this._programDataHash[key]=generateProgram(this._gl,program),this._programDataHash[key]}destroy(){for(const key of Object.keys(this._programDataHash)){this._programDataHash[key].destroy(),this._programDataHash[key]=null}this._programDataHash=null}_generateShaderSync(shader,shaderSystem){return function generateShaderSyncCode(shader,shaderSystem){const funcFragments=[],headerFragments=["\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    "];let addedTextreSystem=!1,textureCount=0;const programData=shaderSystem._getProgramData(shader.glProgram);for(const i in shader.groups){const group=shader.groups[i];funcFragments.push(`\n            resources = g[${i}].resources;\n        `);for(const j in group.resources){const resource=group.resources[j];if(resource instanceof UniformGroup.k)if(resource.ubo){const resName=shader._uniformBindMap[i][Number(j)];funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            '${resName}',\n                            ${shader.glProgram._uniformBlockData[resName].index}\n                        );\n                    `)}else funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);else if(resource instanceof BufferResource.d){const resName=shader._uniformBindMap[i][Number(j)];funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        '${resName}',\n                        ${shader.glProgram._uniformBlockData[resName].index}\n                    );\n                `)}else if(resource instanceof TextureSource.v){const uniformName=shader._uniformBindMap[i][j],uniformData=programData.uniformData[uniformName];uniformData&&(addedTextreSystem||(addedTextreSystem=!0,headerFragments.push("\n                        var tS = r.texture;\n                        ")),shaderSystem._gl.uniform1i(uniformData.location,textureCount),funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `),textureCount++)}}}const functionSource=[...headerFragments,...funcFragments].join("\n");return new Function("r","s","sD",functionSource)}(shader,shaderSystem)}}GlShaderSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"shader"};var uniformParsers=__webpack_require__("./node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs");const UNIFORM_TO_SINGLE_SETTERS={f32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }","vec2<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }","vec3<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }","vec4<f32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }",i32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<i32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }",u32:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }","vec2<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }","vec3<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }","vec4<u32>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }",bool:"if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }","vec2<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }","vec3<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }","vec4<bool>":"if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);"},UNIFORM_TO_ARRAY_SETTERS={f32:"gl.uniform1fv(location, v);","vec2<f32>":"gl.uniform2fv(location, v);","vec3<f32>":"gl.uniform3fv(location, v);","vec4<f32>":"gl.uniform4fv(location, v);","mat2x2<f32>":"gl.uniformMatrix2fv(location, false, v);","mat3x3<f32>":"gl.uniformMatrix3fv(location, false, v);","mat4x4<f32>":"gl.uniformMatrix4fv(location, false, v);",i32:"gl.uniform1iv(location, v);","vec2<i32>":"gl.uniform2iv(location, v);","vec3<i32>":"gl.uniform3iv(location, v);","vec4<i32>":"gl.uniform4iv(location, v);",u32:"gl.uniform1iv(location, v);","vec2<u32>":"gl.uniform2iv(location, v);","vec3<u32>":"gl.uniform3iv(location, v);","vec4<u32>":"gl.uniform4iv(location, v);",bool:"gl.uniform1iv(location, v);","vec2<bool>":"gl.uniform2iv(location, v);","vec3<bool>":"gl.uniform3iv(location, v);","vec4<bool>":"gl.uniform4iv(location, v);"};class GlUniformGroupSystem{constructor(renderer){this._cache={},this._uniformGroupSyncHash={},this._renderer=renderer,this.gl=null,this._cache={}}contextChange(gl){this.gl=gl}updateUniformGroup(group,program,syncData){const programData=this._renderer.shader._getProgramData(program);if(!group.isStatic||group._dirtyId!==programData.uniformDirtyGroups[group.uid]){programData.uniformDirtyGroups[group.uid]=group._dirtyId;this._getUniformSyncFunction(group,program)(programData.uniformData,group.uniforms,this._renderer,syncData)}}_getUniformSyncFunction(group,program){return this._uniformGroupSyncHash[group._signature]?.[program._key]||this._createUniformSyncFunction(group,program)}_createUniformSyncFunction(group,program){const uniformGroupSyncHash=this._uniformGroupSyncHash[group._signature]||(this._uniformGroupSyncHash[group._signature]={}),id=this._getSignature(group,program._uniformData,"u");return this._cache[id]||(this._cache[id]=this._generateUniformsSync(group,program._uniformData)),uniformGroupSyncHash[program._key]=this._cache[id],uniformGroupSyncHash[program._key]}_generateUniformsSync(group,uniformData){return function generateUniformsSync(group,uniformData){const funcFragments=["\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    "];for(const i in group.uniforms){if(!uniformData[i]){group.uniforms[i]instanceof UniformGroup.k?group.uniforms[i].ubo?funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, "${i}");\n                    `):funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `):group.uniforms[i]instanceof BufferResource.d&&funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, "${i}");\n                    `);continue}const uniform=group.uniformStructures[i];let parsed=!1;for(let j=0;j<uniformParsers.$.length;j++){const parser=uniformParsers.$[j];if(uniform.type===parser.type&&parser.test(uniform)){funcFragments.push(`name = "${i}";`,uniformParsers.$[j].uniform),parsed=!0;break}}if(!parsed){const template=(1===uniform.size?UNIFORM_TO_SINGLE_SETTERS:UNIFORM_TO_ARRAY_SETTERS)[uniform.type].replace("location",`ud["${i}"].location`);funcFragments.push(`\n            cu = ud["${i}"];\n            cv = cu.value;\n            v = uv["${i}"];\n            ${template};`)}}return new Function("ud","uv","renderer","syncData",funcFragments.join("\n"))}(group,uniformData)}_getSignature(group,uniformData,preFix){const uniforms=group.uniforms,strings=[`${preFix}-`];for(const i in uniforms)strings.push(i),uniformData[i]&&strings.push(uniformData[i].type);return strings.join("-")}destroy(){this._renderer=null,this._cache=null}}GlUniformGroupSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"uniformGroup"};const _GlStateSystem=class _GlStateSystem{constructor(){this.gl=null,this.stateId=0,this.polygonOffset=0,this.blendMode="none",this._blendEq=!1,this.map=[],this.map[0]=this.setBlend,this.map[1]=this.setOffset,this.map[2]=this.setCullFace,this.map[3]=this.setDepthTest,this.map[4]=this.setFrontFace,this.map[5]=this.setDepthMask,this.checks=[],this.defaultState=State.U.for2d()}contextChange(gl){this.gl=gl,this.blendModesMap=function mapWebGLBlendModesToPixi(gl){const blendMap={};if(blendMap.normal=[gl.ONE,gl.ONE_MINUS_SRC_ALPHA],blendMap.add=[gl.ONE,gl.ONE],blendMap.multiply=[gl.DST_COLOR,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA],blendMap.screen=[gl.ONE,gl.ONE_MINUS_SRC_COLOR,gl.ONE,gl.ONE_MINUS_SRC_ALPHA],blendMap.none=[0,0],blendMap["normal-npm"]=[gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA],blendMap["add-npm"]=[gl.SRC_ALPHA,gl.ONE,gl.ONE,gl.ONE],blendMap["screen-npm"]=[gl.SRC_ALPHA,gl.ONE_MINUS_SRC_COLOR,gl.ONE,gl.ONE_MINUS_SRC_ALPHA],blendMap.erase=[gl.ZERO,gl.ONE_MINUS_SRC_ALPHA],gl instanceof adapter.e.get().getWebGLRenderingContext()){const ext=gl.getExtension("EXT_blend_minmax");ext&&(blendMap.min=[gl.ONE,gl.ONE,gl.ONE,gl.ONE,ext.MIN_EXT,ext.MIN_EXT],blendMap.max=[gl.ONE,gl.ONE,gl.ONE,gl.ONE,ext.MAX_EXT,ext.MAX_EXT])}else blendMap.min=[gl.ONE,gl.ONE,gl.ONE,gl.ONE,gl.MIN,gl.MIN],blendMap.max=[gl.ONE,gl.ONE,gl.ONE,gl.ONE,gl.MAX,gl.MAX];return blendMap}(gl),this.reset()}set(state){if(state||(state=this.defaultState),this.stateId!==state.data){let diff=this.stateId^state.data,i=0;for(;diff;)1&diff&&this.map[i].call(this,!!(state.data&1<<i)),diff>>=1,i++;this.stateId=state.data}for(let i=0;i<this.checks.length;i++)this.checks[i](this,state)}forceState(state){state||(state=this.defaultState);for(let i=0;i<this.map.length;i++)this.map[i].call(this,!!(state.data&1<<i));for(let i=0;i<this.checks.length;i++)this.checks[i](this,state);this.stateId=state.data}setBlend(value){this._updateCheck(_GlStateSystem._checkBlendMode,value),this.gl[value?"enable":"disable"](this.gl.BLEND)}setOffset(value){this._updateCheck(_GlStateSystem._checkPolygonOffset,value),this.gl[value?"enable":"disable"](this.gl.POLYGON_OFFSET_FILL)}setDepthTest(value){this.gl[value?"enable":"disable"](this.gl.DEPTH_TEST)}setDepthMask(value){this.gl.depthMask(value)}setCullFace(value){this.gl[value?"enable":"disable"](this.gl.CULL_FACE)}setFrontFace(value){this.gl.frontFace(this.gl[value?"CW":"CCW"])}setBlendMode(value){if(this.blendModesMap[value]||(value="normal"),value===this.blendMode)return;this.blendMode=value;const mode=this.blendModesMap[value],gl=this.gl;2===mode.length?gl.blendFunc(mode[0],mode[1]):gl.blendFuncSeparate(mode[0],mode[1],mode[2],mode[3]),6===mode.length?(this._blendEq=!0,gl.blendEquationSeparate(mode[4],mode[5])):this._blendEq&&(this._blendEq=!1,gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD))}setPolygonOffset(value,scale){this.gl.polygonOffset(value,scale)}reset(){this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!1),this.forceState(this.defaultState),this._blendEq=!0,this.blendMode="",this.setBlendMode("normal")}_updateCheck(func,value){const index=this.checks.indexOf(func);value&&-1===index?this.checks.push(func):value||-1===index||this.checks.splice(index,1)}static _checkBlendMode(system,state){system.setBlendMode(state.blendMode)}static _checkPolygonOffset(system,state){system.setPolygonOffset(1,state.polygonOffset)}destroy(){this.gl=null,this.checks.length=0}};_GlStateSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"state"};let GlStateSystem=_GlStateSystem;class GlTexture{constructor(texture){this.target=GL_TARGETS.TEXTURE_2D,this.texture=texture,this.width=-1,this.height=-1,this.type=GL_TYPES.UNSIGNED_BYTE,this.internalFormat=GL_FORMATS.RGBA,this.format=GL_FORMATS.RGBA,this.samplerType=0}}const glUploadBufferImageResource={id:"buffer",upload(source,glTexture,gl){glTexture.width===source.width||glTexture.height===source.height?gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,source.width,source.height,glTexture.format,glTexture.type,source.resource):gl.texImage2D(glTexture.target,0,glTexture.internalFormat,source.width,source.height,0,glTexture.format,glTexture.type,source.resource),glTexture.width=source.width,glTexture.height=source.height}},compressedFormatMap={"bc1-rgba-unorm":!0,"bc1-rgba-unorm-srgb":!0,"bc2-rgba-unorm":!0,"bc2-rgba-unorm-srgb":!0,"bc3-rgba-unorm":!0,"bc3-rgba-unorm-srgb":!0,"bc4-r-unorm":!0,"bc4-r-snorm":!0,"bc5-rg-unorm":!0,"bc5-rg-snorm":!0,"bc6h-rgb-ufloat":!0,"bc6h-rgb-float":!0,"bc7-rgba-unorm":!0,"bc7-rgba-unorm-srgb":!0,"etc2-rgb8unorm":!0,"etc2-rgb8unorm-srgb":!0,"etc2-rgb8a1unorm":!0,"etc2-rgb8a1unorm-srgb":!0,"etc2-rgba8unorm":!0,"etc2-rgba8unorm-srgb":!0,"eac-r11unorm":!0,"eac-r11snorm":!0,"eac-rg11unorm":!0,"eac-rg11snorm":!0,"astc-4x4-unorm":!0,"astc-4x4-unorm-srgb":!0,"astc-5x4-unorm":!0,"astc-5x4-unorm-srgb":!0,"astc-5x5-unorm":!0,"astc-5x5-unorm-srgb":!0,"astc-6x5-unorm":!0,"astc-6x5-unorm-srgb":!0,"astc-6x6-unorm":!0,"astc-6x6-unorm-srgb":!0,"astc-8x5-unorm":!0,"astc-8x5-unorm-srgb":!0,"astc-8x6-unorm":!0,"astc-8x6-unorm-srgb":!0,"astc-8x8-unorm":!0,"astc-8x8-unorm-srgb":!0,"astc-10x5-unorm":!0,"astc-10x5-unorm-srgb":!0,"astc-10x6-unorm":!0,"astc-10x6-unorm-srgb":!0,"astc-10x8-unorm":!0,"astc-10x8-unorm-srgb":!0,"astc-10x10-unorm":!0,"astc-10x10-unorm-srgb":!0,"astc-12x10-unorm":!0,"astc-12x10-unorm-srgb":!0,"astc-12x12-unorm":!0,"astc-12x12-unorm-srgb":!0},glUploadCompressedTextureResource={id:"compressed",upload(source,glTexture,gl){gl.pixelStorei(gl.UNPACK_ALIGNMENT,4);let mipWidth=source.pixelWidth,mipHeight=source.pixelHeight;const compressed=!!compressedFormatMap[source.format];for(let i=0;i<source.resource.length;i++){const levelBuffer=source.resource[i];compressed?gl.compressedTexImage2D(gl.TEXTURE_2D,i,glTexture.internalFormat,mipWidth,mipHeight,0,levelBuffer):gl.texImage2D(gl.TEXTURE_2D,i,glTexture.internalFormat,mipWidth,mipHeight,0,glTexture.format,glTexture.type,levelBuffer),mipWidth=Math.max(mipWidth>>1,1),mipHeight=Math.max(mipHeight>>1,1)}}},glUploadImageResource={id:"image",upload(source,glTexture,gl,webGLVersion){const premultipliedAlpha="premultiply-alpha-on-upload"===source.alphaMode;gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,premultipliedAlpha);const glWidth=glTexture.width,glHeight=glTexture.height,textureWidth=source.pixelWidth,textureHeight=source.pixelHeight,resourceWidth=source.resourceWidth,resourceHeight=source.resourceHeight;resourceWidth<textureWidth||resourceHeight<textureHeight?(glWidth===textureWidth&&glHeight===textureHeight||gl.texImage2D(glTexture.target,0,glTexture.internalFormat,textureWidth,textureHeight,0,glTexture.format,glTexture.type,null),2===webGLVersion?gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,resourceWidth,resourceHeight,glTexture.format,glTexture.type,source.resource):gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,glTexture.format,glTexture.type,source.resource)):glWidth===textureWidth||glHeight===textureHeight?gl.texSubImage2D(gl.TEXTURE_2D,0,0,0,glTexture.format,glTexture.type,source.resource):2===webGLVersion?gl.texImage2D(glTexture.target,0,glTexture.internalFormat,textureWidth,textureHeight,0,glTexture.format,glTexture.type,source.resource):gl.texImage2D(glTexture.target,0,glTexture.internalFormat,glTexture.format,glTexture.type,source.resource),glTexture.width=textureWidth,glTexture.height=textureHeight}},glUploadVideoResource={id:"video",upload(source,glTexture,gl,webGLVersion){source.isValid?glUploadImageResource.upload(source,glTexture,gl,webGLVersion):gl.texImage2D(glTexture.target,0,glTexture.internalFormat,1,1,0,glTexture.format,glTexture.type,null)}},scaleModeToGlFilter={linear:9729,nearest:9728},mipmapScaleModeToGlFilter={linear:{linear:9987,nearest:9985},nearest:{linear:9986,nearest:9984}},wrapModeToGlAddress={"clamp-to-edge":33071,repeat:10497,"mirror-repeat":33648},compareModeToGlCompare={never:512,less:513,equal:514,"less-equal":515,greater:516,"not-equal":517,"greater-equal":518,always:519};function applyStyleParams(style,gl,mipmaps,anisotropicExt,glFunctionName,firstParam,forceClamp,firstCreation){const castParam=firstParam;if(!firstCreation||"repeat"!==style.addressModeU||"repeat"!==style.addressModeV||"repeat"!==style.addressModeW){const wrapModeS=wrapModeToGlAddress[forceClamp?"clamp-to-edge":style.addressModeU],wrapModeT=wrapModeToGlAddress[forceClamp?"clamp-to-edge":style.addressModeV],wrapModeR=wrapModeToGlAddress[forceClamp?"clamp-to-edge":style.addressModeW];gl[glFunctionName](castParam,gl.TEXTURE_WRAP_S,wrapModeS),gl[glFunctionName](castParam,gl.TEXTURE_WRAP_T,wrapModeT),gl.TEXTURE_WRAP_R&&gl[glFunctionName](castParam,gl.TEXTURE_WRAP_R,wrapModeR)}if(firstCreation&&"linear"===style.magFilter||gl[glFunctionName](castParam,gl.TEXTURE_MAG_FILTER,scaleModeToGlFilter[style.magFilter]),mipmaps){if(!firstCreation||"linear"!==style.mipmapFilter){const glFilterMode=mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];gl[glFunctionName](castParam,gl.TEXTURE_MIN_FILTER,glFilterMode)}}else gl[glFunctionName](castParam,gl.TEXTURE_MIN_FILTER,scaleModeToGlFilter[style.minFilter]);if(anisotropicExt&&style.maxAnisotropy>1){const level=Math.min(style.maxAnisotropy,gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));gl[glFunctionName](castParam,anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT,level)}style.compare&&gl[glFunctionName](castParam,gl.TEXTURE_COMPARE_FUNC,compareModeToGlCompare[style.compare])}class GlTextureSystem{constructor(renderer){this.managedTextures=[],this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundTextures=[],this._activeTextureLocation=-1,this._boundSamplers=Object.create(null),this._uploads={image:glUploadImageResource,buffer:glUploadBufferImageResource,video:glUploadVideoResource,compressed:glUploadCompressedTextureResource},this._useSeparateSamplers=!1,this._renderer=renderer,this._renderer.renderableGC.addManagedHash(this,"_glTextures"),this._renderer.renderableGC.addManagedHash(this,"_glSamplers")}contextChange(gl){this._gl=gl,this._mapFormatToInternalFormat||(this._mapFormatToInternalFormat=function mapFormatToGlInternalFormat(gl,extensions){let srgb={},bgra8unorm=gl.RGBA;return gl instanceof adapter.e.get().getWebGLRenderingContext()?extensions.srgb&&(srgb={"rgba8unorm-srgb":extensions.srgb.SRGB8_ALPHA8_EXT,"bgra8unorm-srgb":extensions.srgb.SRGB8_ALPHA8_EXT}):(srgb={"rgba8unorm-srgb":gl.SRGB8_ALPHA8,"bgra8unorm-srgb":gl.SRGB8_ALPHA8},bgra8unorm=gl.RGBA8),{r8unorm:gl.R8,r8snorm:gl.R8_SNORM,r8uint:gl.R8UI,r8sint:gl.R8I,r16uint:gl.R16UI,r16sint:gl.R16I,r16float:gl.R16F,rg8unorm:gl.RG8,rg8snorm:gl.RG8_SNORM,rg8uint:gl.RG8UI,rg8sint:gl.RG8I,r32uint:gl.R32UI,r32sint:gl.R32I,r32float:gl.R32F,rg16uint:gl.RG16UI,rg16sint:gl.RG16I,rg16float:gl.RG16F,rgba8unorm:gl.RGBA,...srgb,rgba8snorm:gl.RGBA8_SNORM,rgba8uint:gl.RGBA8UI,rgba8sint:gl.RGBA8I,bgra8unorm,rgb9e5ufloat:gl.RGB9_E5,rgb10a2unorm:gl.RGB10_A2,rg11b10ufloat:gl.R11F_G11F_B10F,rg32uint:gl.RG32UI,rg32sint:gl.RG32I,rg32float:gl.RG32F,rgba16uint:gl.RGBA16UI,rgba16sint:gl.RGBA16I,rgba16float:gl.RGBA16F,rgba32uint:gl.RGBA32UI,rgba32sint:gl.RGBA32I,rgba32float:gl.RGBA32F,stencil8:gl.STENCIL_INDEX8,depth16unorm:gl.DEPTH_COMPONENT16,depth24plus:gl.DEPTH_COMPONENT24,"depth24plus-stencil8":gl.DEPTH24_STENCIL8,depth32float:gl.DEPTH_COMPONENT32F,"depth32float-stencil8":gl.DEPTH32F_STENCIL8,...extensions.s3tc?{"bc1-rgba-unorm":extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,"bc2-rgba-unorm":extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,"bc3-rgba-unorm":extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT}:{},...extensions.s3tc_sRGB?{"bc1-rgba-unorm-srgb":extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,"bc2-rgba-unorm-srgb":extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,"bc3-rgba-unorm-srgb":extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}:{},...extensions.rgtc?{"bc4-r-unorm":extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,"bc4-r-snorm":extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,"bc5-rg-unorm":extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,"bc5-rg-snorm":extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}:{},...extensions.bptc?{"bc6h-rgb-float":extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,"bc6h-rgb-ufloat":extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,"bc7-rgba-unorm":extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,"bc7-rgba-unorm-srgb":extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT}:{},...extensions.etc?{"etc2-rgb8unorm":extensions.etc.COMPRESSED_RGB8_ETC2,"etc2-rgb8unorm-srgb":extensions.etc.COMPRESSED_SRGB8_ETC2,"etc2-rgb8a1unorm":extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgb8a1unorm-srgb":extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,"etc2-rgba8unorm":extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,"etc2-rgba8unorm-srgb":extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,"eac-r11unorm":extensions.etc.COMPRESSED_R11_EAC,"eac-rg11unorm":extensions.etc.COMPRESSED_SIGNED_RG11_EAC}:{},...extensions.astc?{"astc-4x4-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,"astc-4x4-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,"astc-5x4-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,"astc-5x4-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,"astc-5x5-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,"astc-5x5-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,"astc-6x5-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,"astc-6x5-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,"astc-6x6-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,"astc-6x6-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,"astc-8x5-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,"astc-8x5-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,"astc-8x6-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,"astc-8x6-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,"astc-8x8-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,"astc-8x8-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,"astc-10x5-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,"astc-10x5-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,"astc-10x6-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,"astc-10x6-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,"astc-10x8-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,"astc-10x8-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,"astc-10x10-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,"astc-10x10-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,"astc-12x10-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,"astc-12x10-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,"astc-12x12-unorm":extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,"astc-12x12-unorm-srgb":extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR}:{}}}(gl,this._renderer.context.extensions),this._mapFormatToType=function mapFormatToGlType(gl){return{r8unorm:gl.UNSIGNED_BYTE,r8snorm:gl.BYTE,r8uint:gl.UNSIGNED_BYTE,r8sint:gl.BYTE,r16uint:gl.UNSIGNED_SHORT,r16sint:gl.SHORT,r16float:gl.HALF_FLOAT,rg8unorm:gl.UNSIGNED_BYTE,rg8snorm:gl.BYTE,rg8uint:gl.UNSIGNED_BYTE,rg8sint:gl.BYTE,r32uint:gl.UNSIGNED_INT,r32sint:gl.INT,r32float:gl.FLOAT,rg16uint:gl.UNSIGNED_SHORT,rg16sint:gl.SHORT,rg16float:gl.HALF_FLOAT,rgba8unorm:gl.UNSIGNED_BYTE,"rgba8unorm-srgb":gl.UNSIGNED_BYTE,rgba8snorm:gl.BYTE,rgba8uint:gl.UNSIGNED_BYTE,rgba8sint:gl.BYTE,bgra8unorm:gl.UNSIGNED_BYTE,"bgra8unorm-srgb":gl.UNSIGNED_BYTE,rgb9e5ufloat:gl.UNSIGNED_INT_5_9_9_9_REV,rgb10a2unorm:gl.UNSIGNED_INT_2_10_10_10_REV,rg11b10ufloat:gl.UNSIGNED_INT_10F_11F_11F_REV,rg32uint:gl.UNSIGNED_INT,rg32sint:gl.INT,rg32float:gl.FLOAT,rgba16uint:gl.UNSIGNED_SHORT,rgba16sint:gl.SHORT,rgba16float:gl.HALF_FLOAT,rgba32uint:gl.UNSIGNED_INT,rgba32sint:gl.INT,rgba32float:gl.FLOAT,stencil8:gl.UNSIGNED_BYTE,depth16unorm:gl.UNSIGNED_SHORT,depth24plus:gl.UNSIGNED_INT,"depth24plus-stencil8":gl.UNSIGNED_INT_24_8,depth32float:gl.FLOAT,"depth32float-stencil8":gl.FLOAT_32_UNSIGNED_INT_24_8_REV}}(gl),this._mapFormatToFormat=function mapFormatToGlFormat(gl){return{r8unorm:gl.RED,r8snorm:gl.RED,r8uint:gl.RED,r8sint:gl.RED,r16uint:gl.RED,r16sint:gl.RED,r16float:gl.RED,rg8unorm:gl.RG,rg8snorm:gl.RG,rg8uint:gl.RG,rg8sint:gl.RG,r32uint:gl.RED,r32sint:gl.RED,r32float:gl.RED,rg16uint:gl.RG,rg16sint:gl.RG,rg16float:gl.RG,rgba8unorm:gl.RGBA,"rgba8unorm-srgb":gl.RGBA,rgba8snorm:gl.RGBA,rgba8uint:gl.RGBA,rgba8sint:gl.RGBA,bgra8unorm:gl.RGBA,"bgra8unorm-srgb":gl.RGBA,rgb9e5ufloat:gl.RGB,rgb10a2unorm:gl.RGBA,rg11b10ufloat:gl.RGB,rg32uint:gl.RG,rg32sint:gl.RG,rg32float:gl.RG,rgba16uint:gl.RGBA,rgba16sint:gl.RGBA,rgba16float:gl.RGBA,rgba32uint:gl.RGBA,rgba32sint:gl.RGBA,rgba32float:gl.RGBA,stencil8:gl.STENCIL_INDEX8,depth16unorm:gl.DEPTH_COMPONENT,depth24plus:gl.DEPTH_COMPONENT,"depth24plus-stencil8":gl.DEPTH_STENCIL,depth32float:gl.DEPTH_COMPONENT,"depth32float-stencil8":gl.DEPTH_STENCIL}}(gl)),this._glTextures=Object.create(null),this._glSamplers=Object.create(null),this._boundSamplers=Object.create(null);for(let i=0;i<16;i++)this.bind(Texture.g.EMPTY,i)}initSource(source){this.bind(source)}bind(texture,location=0){const source=texture.source;texture?(this.bindSource(source,location),this._useSeparateSamplers&&this._bindSampler(source.style,location)):(this.bindSource(null,location),this._useSeparateSamplers&&this._bindSampler(null,location))}bindSource(source,location=0){const gl=this._gl;if(source._touched=this._renderer.textureGC.count,this._boundTextures[location]!==source){this._boundTextures[location]=source,this._activateLocation(location),source||(source=Texture.g.EMPTY.source);const glTexture=this.getGlSource(source);gl.bindTexture(glTexture.target,glTexture.texture)}}_bindSampler(style,location=0){const gl=this._gl;if(!style)return this._boundSamplers[location]=null,void gl.bindSampler(location,null);const sampler=this._getGlSampler(style);this._boundSamplers[location]!==sampler&&(this._boundSamplers[location]=sampler,gl.bindSampler(location,sampler))}unbind(texture){const source=texture.source,boundTextures=this._boundTextures,gl=this._gl;for(let i=0;i<boundTextures.length;i++)if(boundTextures[i]===source){this._activateLocation(i);const glTexture=this.getGlSource(source);gl.bindTexture(glTexture.target,null),boundTextures[i]=null}}_activateLocation(location){this._activeTextureLocation!==location&&(this._activeTextureLocation=location,this._gl.activeTexture(this._gl.TEXTURE0+location))}_initSource(source){const gl=this._gl,glTexture=new GlTexture(gl.createTexture());if(glTexture.type=this._mapFormatToType[source.format],glTexture.internalFormat=this._mapFormatToInternalFormat[source.format],glTexture.format=this._mapFormatToFormat[source.format],source.autoGenerateMipmaps&&(this._renderer.context.supports.nonPowOf2mipmaps||source.isPowerOfTwo)){const biggestDimension=Math.max(source.width,source.height);source.mipLevelCount=Math.floor(Math.log2(biggestDimension))+1}return this._glTextures[source.uid]=glTexture,this.managedTextures.includes(source)||(source.on("update",this.onSourceUpdate,this),source.on("resize",this.onSourceUpdate,this),source.on("styleChange",this.onStyleChange,this),source.on("destroy",this.onSourceDestroy,this),source.on("unload",this.onSourceUnload,this),source.on("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.push(source)),this.onSourceUpdate(source),this.updateStyle(source,!1),glTexture}onStyleChange(source){this.updateStyle(source,!1)}updateStyle(source,firstCreation){const gl=this._gl,glTexture=this.getGlSource(source);gl.bindTexture(gl.TEXTURE_2D,glTexture.texture),this._boundTextures[this._activeTextureLocation]=source,applyStyleParams(source.style,gl,source.mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"texParameteri",gl.TEXTURE_2D,!this._renderer.context.supports.nonPowOf2wrapping&&!source.isPowerOfTwo,firstCreation)}onSourceUnload(source){const glTexture=this._glTextures[source.uid];glTexture&&(this.unbind(source),this._glTextures[source.uid]=null,this._gl.deleteTexture(glTexture.texture))}onSourceUpdate(source){const gl=this._gl,glTexture=this.getGlSource(source);gl.bindTexture(gl.TEXTURE_2D,glTexture.texture),this._boundTextures[this._activeTextureLocation]=source,this._uploads[source.uploadMethodId]?this._uploads[source.uploadMethodId].upload(source,glTexture,gl,this._renderer.context.webGLVersion):gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,source.pixelWidth,source.pixelHeight,0,gl.RGBA,gl.UNSIGNED_BYTE,null),source.autoGenerateMipmaps&&source.mipLevelCount>1&&this.onUpdateMipmaps(source,!1)}onUpdateMipmaps(source,bind=!0){bind&&this.bindSource(source,0);const glTexture=this.getGlSource(source);this._gl.generateMipmap(glTexture.target)}onSourceDestroy(source){source.off("destroy",this.onSourceDestroy,this),source.off("update",this.onSourceUpdate,this),source.off("resize",this.onSourceUpdate,this),source.off("unload",this.onSourceUnload,this),source.off("styleChange",this.onStyleChange,this),source.off("updateMipmaps",this.onUpdateMipmaps,this),this.managedTextures.splice(this.managedTextures.indexOf(source),1),this.onSourceUnload(source)}_initSampler(style){const gl=this._gl,glSampler=this._gl.createSampler();return this._glSamplers[style._resourceId]=glSampler,applyStyleParams(style,gl,this._boundTextures[this._activeTextureLocation].mipLevelCount>1,this._renderer.context.extensions.anisotropicFiltering,"samplerParameteri",glSampler,!1,!0),this._glSamplers[style._resourceId]}_getGlSampler(sampler){return this._glSamplers[sampler._resourceId]||this._initSampler(sampler)}getGlSource(source){return this._glTextures[source.uid]||this._initSource(source)}generateCanvas(texture){const{pixels,width,height}=this.getPixels(texture),canvas=adapter.e.get().createCanvas();canvas.width=width,canvas.height=height;const ctx=canvas.getContext("2d");if(ctx){const imageData=ctx.createImageData(width,height);imageData.data.set(pixels),ctx.putImageData(imageData,0,0)}return canvas}getPixels(texture){const resolution=texture.source.resolution,frame=texture.frame,width=Math.max(Math.round(frame.width*resolution),1),height=Math.max(Math.round(frame.height*resolution),1),pixels=new Uint8Array(4*width*height),renderer=this._renderer,renderTarget=renderer.renderTarget.getRenderTarget(texture),glRenterTarget=renderer.renderTarget.getGpuRenderTarget(renderTarget),gl=renderer.gl;return gl.bindFramebuffer(gl.FRAMEBUFFER,glRenterTarget.resolveTargetFramebuffer),gl.readPixels(Math.round(frame.x*resolution),Math.round(frame.y*resolution),width,height,gl.RGBA,gl.UNSIGNED_BYTE,pixels),{pixels:new Uint8ClampedArray(pixels.buffer),width,height}}destroy(){this.managedTextures.slice().forEach((source=>this.onSourceDestroy(source))),this.managedTextures=null,this._renderer=null}}GlTextureSystem.extension={type:[Extensions.Ag.WebGLSystem],name:"texture"};const DefaultWebGLSystems=[...SharedSystems.i,GlUboSystem,GlBackBufferSystem,GlContextSystem,GlBufferSystem,GlTextureSystem,GlRenderTargetSystem,GlGeometrySystem,GlUniformGroupSystem,GlShaderSystem,GlEncoderSystem,GlStateSystem,GlStencilSystem,GlColorMaskSystem],DefaultWebGLPipes=[...SharedSystems.f],DefaultWebGLAdapters=[GlBatchAdaptor,GlMeshAdaptor,GlGraphicsAdaptor],systems=[],renderPipes=[],renderPipeAdaptors=[];Extensions.XO.handleByNamedList(Extensions.Ag.WebGLSystem,systems),Extensions.XO.handleByNamedList(Extensions.Ag.WebGLPipes,renderPipes),Extensions.XO.handleByNamedList(Extensions.Ag.WebGLPipesAdaptor,renderPipeAdaptors),Extensions.XO.add(...DefaultWebGLSystems,...DefaultWebGLPipes,...DefaultWebGLAdapters);class WebGLRenderer extends AbstractRenderer.k{constructor(){super({name:"webgl",type:types.W.WEBGL,systems,renderPipes,renderPipeAdaptors})}}}}]);